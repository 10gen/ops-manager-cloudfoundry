// Code generated by go-bindata.
// sources:
// om_cluster_docs/3_2_cluster.json
// om_cluster_docs/replica_set.json
// om_cluster_docs/standalone.json
// DO NOT EDIT!

package adapter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _om_cluster_docs3_2_clusterJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x98\x5b\x6f\x9b\x30\x14\xc7\xdf\xf3\x29\x10\xcf\x69\x08\xb4\x49\xb7\xbc\xb5\x59\xa5\x4c\x5a\xd2\xa9\x89\xba\x87\x36\x42\x06\x5c\xb0\x06\x18\xd9\x4e\xa6\x6c\xca\x77\x9f\xcd\xdd\x04\xd8\x45\xcb\x40\x2d\x6f\x70\xce\xf9\xfb\x5c\x7e\x38\x38\x3f\x06\x0a\xbf\x70\xc4\x10\x0e\xe9\x4c\x49\x6e\xc5\xe5\xe0\x6f\xa1\x8f\x81\x73\x0b\x28\x9c\x29\xaa\xb6\x07\x44\xf3\x91\xa5\x05\x38\x74\xb1\x63\x5d\x04\x01\xbd\x00\x3b\x86\x03\x20\x42\xd5\x61\x6d\xe0\x17\x14\xf2\x5b\xae\xab\xce\x67\xcf\xcf\x0d\xa1\x71\xe4\x31\x11\x88\x5d\x3e\x58\x8f\x90\xd0\x24\xa1\xa7\x22\xa3\x10\x04\x22\x93\xcb\xd1\x78\x34\xcd\x82\x94\x1a\xb3\x3e\xba\x4e\xcd\xdb\x44\xd4\x02\xf6\xd7\x5d\x54\xab\xe9\x61\xca\xd2\xc0\xe5\xcd\x7c\xf1\x71\x75\x67\x2e\xee\xd7\x9b\xd5\xcd\xf2\xae\x54\x92\x8f\xdd\xcf\x80\x79\x79\x1b\xb0\xdb\xd0\x06\x2d\x59\xea\x02\xb8\x30\x64\x23\xee\x27\x8b\x3c\x60\x06\x18\x2c\x77\x59\x5c\x14\x7d\x87\x1b\x8f\x40\xea\x61\xdf\x59\xde\xce\x14\x7d\x3c\x1e\x0f\x25\x17\x86\x82\xc2\x65\x41\x78\x0d\xc6\x55\xee\x70\x94\x8a\xe5\x89\x21\x86\x09\x0a\xdd\xff\x52\x70\xb1\x5c\x97\x45\x47\x04\xdb\x90\x52\x28\xd7\x0a\x88\x4b\x0d\x73\x5a\x5d\x3a\x84\xac\xfa\x28\xd6\xc0\x84\x3f\x37\xde\xf1\x3c\x24\xdb\x51\xce\x8a\xc0\xc8\x47\x76\x5c\x7c\x9d\x8a\x30\xaf\x21\x5b\x25\x2d\xb6\xfc\x1d\x54\xdb\xd4\x28\xef\x1d\xef\x5b\x9d\x92\x63\x65\x23\x60\x41\xa4\x39\x80\x01\x4d\xc8\x99\xe3\x76\xc1\x03\x65\x30\xf8\x84\xdd\x5a\x49\x48\x19\x0a\xd3\xdc\xd5\x17\xe4\x43\x75\x78\xda\x87\xfa\x55\x33\x00\xe2\x01\xcb\x19\x0c\x6a\x72\xf9\x6d\xce\xce\x84\xc7\xb0\xba\x2f\xa4\xbd\x2b\x9e\xa7\xcc\x6c\x0e\x91\x30\x27\xd5\x95\xcc\xfb\xe4\xed\xc9\x77\x94\xc2\xc2\xe9\xf7\xd6\xb6\x07\x03\xf0\x98\xf9\x5c\x9e\x6e\x47\x7f\x0b\x9f\xde\x6b\xf8\xf4\x4e\xe0\xd3\x5f\x05\x7c\x7a\xff\xe1\x33\x7a\x0d\x9f\xd1\x09\x7c\xc6\xab\x80\xcf\xe8\x3d\x7c\xfa\x75\x17\xd3\x8d\xab\xa7\xe6\xe5\x1f\x0e\xd9\xf6\x77\x3c\x1f\x92\x76\x77\x9e\xdc\xa9\x7d\x87\x20\x2b\xb6\x9d\x05\xda\x03\x16\xde\xb7\xb2\xe0\x01\xe2\xf0\x2f\xce\x3a\x89\x74\x30\x0f\xd8\x17\xf5\xd8\x38\x7c\x41\x2e\xdd\x93\x7f\xbd\x15\x25\xc2\xe6\x55\x27\x3b\x52\xb6\xf8\x59\x36\x26\xe0\x23\x40\xfb\x85\x6d\xde\xec\xbe\x6f\x61\x46\xeb\xc9\xa1\x3f\xd8\x4e\xba\xc4\x76\xf2\xc6\xb0\x9d\xf4\x1f\xdb\xd6\x33\x47\x7f\xb0\x9d\x76\x89\xed\xf4\x8d\x61\x3b\x3d\x2f\xb6\xe9\x1f\x37\xe9\x99\x82\x9f\x1b\xe4\xbf\x6e\x4c\xe4\x64\x87\x88\x42\x2d\x80\x81\x05\x89\xec\x98\x3b\x57\x2a\x17\xed\x2f\x4e\xfd\xa5\x9a\x95\x9a\x58\xbd\x39\x56\xff\x55\xac\x21\xc7\x02\x62\x21\xfe\x46\xdc\x87\xfe\x61\xa6\x30\xb2\x83\xcd\xd2\x46\x05\xc1\x88\x20\x4c\x10\xe3\x71\xc5\xcf\xc8\x71\x2b\xb5\xab\x78\x17\x4b\x2d\x48\x06\xb6\x86\x64\x2f\x3e\x48\x9f\x24\xcd\xc6\x1f\xd0\x13\xe3\xa4\xcd\x58\x7a\xf3\xb6\xb5\xd4\x9c\x7e\x01\xc7\xa9\x36\xcc\xaa\x3a\x58\x71\x89\xb9\x56\x4e\x8d\x79\xf1\x83\xe3\xe0\x67\x00\x00\x00\xff\xff\xb5\x47\x39\xde\xa8\x16\x00\x00")

func om_cluster_docs3_2_clusterJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docs3_2_clusterJson,
		"om_cluster_docs/3_2_cluster.json",
	)
}

func om_cluster_docs3_2_clusterJson() (*asset, error) {
	bytes, err := om_cluster_docs3_2_clusterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/3_2_cluster.json", size: 5800, mode: os.FileMode(420), modTime: time.Unix(1463071475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsReplica_setJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4d\x4f\xc3\x38\x10\xbd\xf7\x57\x54\x39\xf7\x33\xfb\xa1\x15\xb7\x42\xa5\xe5\xb0\x05\x44\x59\x38\x40\x55\x39\x89\xdb\x78\x49\xec\xc8\x76\x41\x5d\x94\xff\xbe\xb6\x93\xa6\xb6\xe3\xb4\x41\xa2\x80\x56\x70\xa2\x9e\xf1\xcc\x9b\xe7\x37\xee\xb8\x6f\x9d\xae\xf8\xf3\x48\xc6\x11\xc1\xcc\x3b\xeb\x16\x0b\x6a\x31\x22\xaf\x38\x21\x20\x3a\x07\x0c\x0a\x8b\x37\x7c\x01\x74\x98\xa0\x60\x98\x12\xbc\x26\x51\xd0\x4f\x53\xd6\x07\x1b\x4e\x52\x20\x77\x7b\x3d\xf7\xd6\x07\x84\xc5\x47\x19\xdb\xbb\x38\x7b\x7a\x6a\xd8\xac\xf6\xe6\x45\x08\x4f\xf9\x4c\x83\x7b\x48\x59\x09\xeb\x51\xc3\x85\x41\xaa\xf0\xfc\x32\x18\x0d\xc6\xfe\x6e\x67\xb7\xc1\x63\xe7\xb0\x28\x63\x07\x20\x7c\xde\x64\x0d\xa1\x63\xc2\xf8\x6e\x73\x01\xb4\x8f\x49\x04\xfb\x23\xbd\xb8\x84\xac\x6f\x00\x8f\xf7\x94\x90\x75\x03\x25\xc3\x22\x59\x1f\xac\x21\xe6\x03\xe1\x67\x85\xb9\x25\x1c\x70\x68\xb0\xae\x4c\x0c\xfd\x0b\xef\x62\x0a\x59\x4c\x92\x68\x76\x2e\x1c\xc6\xa3\xd1\xa8\x67\x3a\x71\x94\xee\x9d\x2e\xa9\x2c\xc5\xff\xb5\x72\xc9\xab\xaa\x2b\x4a\x11\x27\x14\xe1\xf5\x27\x95\xbe\x4f\xf8\xb5\xe5\x2b\xe7\x8c\x92\x10\x32\x06\xed\xa2\x01\x5d\x33\x7f\xf9\x7b\x1d\x02\x86\xbc\xb6\x58\x44\x22\x54\x5a\xfc\x3f\x04\x22\xc3\x9a\x5b\xf8\x28\xcc\x12\x14\x16\xe2\x76\x46\x92\x0e\x73\xc8\xaf\x4a\xce\xb3\x70\xb5\x94\x4b\xde\xc1\xa8\x4c\x50\x2a\xe8\x74\x47\x8c\x02\xe3\x70\x5e\x42\x90\x0d\xe5\x06\x58\x9d\x51\x04\x38\x38\x92\x60\xcb\x38\x4c\xff\x12\x67\xe5\x4e\x01\x19\x47\x78\x57\x95\xb7\x42\x09\xf4\x7a\x0e\x96\xea\x38\xb6\x4c\x53\xcb\x52\x4a\x6b\x87\x4a\x29\xc3\x04\xd5\x71\xc0\x6b\xad\xd0\x53\xca\xaa\x57\xbf\x64\x1a\xa1\x94\xa2\xbb\xdb\x66\x9a\x9f\xee\xf0\x52\x74\xa2\x76\x97\x69\x46\xd1\x4a\xf1\x3c\x8c\x61\x0a\xee\x2b\xb7\xdf\x1c\x77\xdd\x8f\x84\xff\x07\x12\x1e\x7f\x1f\x09\x8f\x7f\x24\xfc\x23\xe1\x02\xd4\xbb\x24\xec\x7f\x1f\x09\xfb\x9f\x22\xe1\xdd\x6c\x51\x4a\x4c\x88\xc8\x9e\x2e\x96\x28\x32\x34\xa5\xc5\x4d\x61\x1a\x40\x6a\x6d\xd0\x36\xd9\x84\x48\xd6\xeb\x5f\x36\x1a\x23\x36\xcd\x45\x98\x71\x8b\x30\xe3\xe3\x61\x7c\x2b\x0c\xa0\x01\xe2\x90\x5e\xe3\x64\x2b\xac\x9c\x6e\x60\x8b\x3c\xbe\x25\x51\x71\x32\x48\xcc\x87\x5c\x86\xd8\x37\x71\xbe\xb0\xd8\x25\x49\x31\xb5\xed\x16\x58\x0c\x68\x24\xa6\xca\x72\xad\x53\x1d\x93\xf9\x78\x91\x93\xe8\xdf\x0c\x52\x85\xa2\xf1\x9d\x22\x57\x6f\x5e\xd5\x29\xbd\xbd\x75\x33\xc0\xd8\x2b\xa1\x51\x37\xcf\x8d\xc7\x8c\x38\x3b\xb2\x4d\xc5\x0c\x3b\x11\x69\x66\x30\x8c\x01\x46\x2c\x55\xa8\xcc\x8a\xe6\x17\xb7\x93\x59\x7f\x7e\x39\x31\x6e\x51\x65\x9a\x5d\x5f\xfd\x79\x3d\x3d\xef\x5f\xdc\xee\xe9\x5e\x68\x49\x9e\xe1\xb6\x44\x21\xfe\xb3\x00\x88\x15\xd5\xe2\x46\x2b\xff\x43\x02\x66\xf4\x71\x48\xf0\x0a\x95\xad\xbd\x24\xe9\x40\x46\xd4\xab\x40\x0c\x04\x09\x94\xb5\xae\x40\xc2\xb4\x13\xf3\x36\x82\x27\x36\x85\x09\xe4\xca\xfc\xb8\xb0\x6d\x0f\x00\x97\x26\xa3\x28\xe7\xe5\x27\x51\x82\x28\x45\xd8\x75\x23\x55\xa7\x59\x33\xb9\xe3\xb5\x8c\x6b\xc4\x97\x8e\x61\xb2\x11\x17\x28\x9d\x15\x6f\x10\xcf\xb9\x21\xaf\xad\x2e\x1c\x88\x37\x9a\x86\xec\x27\x8d\xab\x42\x24\x5c\xdc\x8a\x3a\x74\xe1\x7f\x7b\x26\x27\xca\xdf\xcd\xa3\x3b\xca\xc7\x41\xa0\x10\x44\x13\xbc\x9d\x8a\x6f\xcd\x40\xfe\x14\xf1\x35\x28\xa4\x10\x14\x0b\x27\x83\x92\x90\x10\x24\x6d\x09\x79\x10\x37\xe7\x57\x51\x71\x2c\xff\xbb\x1b\x4b\xff\x99\xe4\x84\x4d\x65\xd4\xd9\xad\xe5\xa9\x20\x35\x3a\x1c\x68\xba\x06\x76\xdb\x50\xdb\xb6\xd7\x5c\xe7\xfa\x11\x69\x8f\xf7\xd7\xa9\x32\xb7\xec\xa9\xf7\xa7\x3f\xd8\x4a\xad\x74\x7c\x4a\xb2\x1b\x73\xda\x4b\xf5\xbe\xb1\x5a\x41\xe5\x5c\x36\x37\x84\x73\xd4\x90\x43\x8f\x31\xc9\xc8\x60\xfa\xe8\x52\x4c\x60\x9d\xbc\xf3\x5f\x00\x00\x00\xff\xff\x1c\x29\x5c\xed\x1e\x16\x00\x00")

func om_cluster_docsReplica_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsReplica_setJson,
		"om_cluster_docs/replica_set.json",
	)
}

func om_cluster_docsReplica_setJson() (*asset, error) {
	bytes, err := om_cluster_docsReplica_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/replica_set.json", size: 5662, mode: os.FileMode(420), modTime: time.Unix(1463673059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsStandaloneJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4f\x4f\xe3\x3e\x10\xbd\xf7\x53\x54\x39\x37\x6d\xe9\xef\x8f\x56\xdc\x0a\x95\x96\xc3\x76\x41\x94\x85\x03\x54\x95\x93\x0c\x8d\x97\xc4\x8e\x6c\x17\xd4\x45\xf9\xee\x6b\x3b\x69\x6a\x27\x4e\x09\x12\x5d\x96\x13\x9d\x19\xcf\xbc\x79\x79\xcf\xf2\x6b\xaf\x2f\xff\x3c\x9a\x09\x4c\x09\xf7\x4e\xfb\x45\x40\x07\x23\xfa\x42\x12\x8a\xa2\x33\xc4\x41\x66\xbc\xd1\x33\x62\xa3\x04\x07\xa3\x94\x92\x35\x8d\x02\x3f\x4d\xb9\x8f\x36\x82\xa6\x48\x9d\xf6\x06\xee\xa3\x77\x98\xc8\x9f\xaa\xb7\x77\x7e\xfa\xf0\xd0\x72\x58\x9f\xcd\x8b\x16\x9e\xae\x99\x05\xb7\xc0\x78\x09\xeb\xde\xc0\x45\x50\xaa\xf1\xfc\x33\x1c\x0f\x4f\x26\xbb\x93\xfd\x96\x8a\x5d\xc1\xb2\xec\x1d\xa0\xf0\x69\x93\xb5\xb4\x8e\x29\x17\xbb\xc3\x05\x50\x9f\xd0\x08\xfc\xb1\xb9\x5c\x42\xd7\x57\x48\xc4\x7b\x4a\xe8\xba\x85\x92\x51\x31\xcc\x47\x6b\x20\x62\x28\xeb\x6a\x6d\xae\xa9\x40\x02\x2c\xd6\x75\x8a\xe3\x5f\x70\x13\x33\xe0\x31\x4d\xa2\xf9\x99\x2c\x38\x19\x8f\xc7\x03\xbb\x48\xe0\x74\x5f\x74\xc1\xd4\x2a\x93\x7f\xab\x92\xbc\xda\xba\xa2\x14\x0b\xca\x30\x59\xff\xa1\xd5\xf7\x03\x3f\x77\x7d\x5d\x9c\x31\x1a\x02\xe7\x50\x5f\x1a\xb1\x35\x9f\xac\xfe\x6f\x42\x20\x20\x1a\xc1\xa2\x13\x65\x2a\x33\xf9\x22\x11\x59\xd9\xbc\x86\x8f\xcb\xe5\xe5\xe2\xee\x2e\x51\x60\xd1\xf8\x1c\xa2\x6c\xa4\x0e\x40\xc5\x66\x84\x04\xf2\x0e\x0f\xd8\x72\x01\xe9\x37\xc9\xaa\x7b\x04\x70\x81\x49\x61\x2e\x39\xe7\x11\x27\xe0\x0d\x1c\xfb\x34\x71\x6c\xb9\xf1\x5d\x57\x4a\x04\x3b\x54\xfa\x1b\xda\xa0\x7a\x0e\x78\x9d\xb5\x74\x4c\x01\x0c\x9a\xd7\x41\x2b\x94\x52\x1e\x37\xdb\xcc\xa8\x33\x0b\x9e\x0b\xcf\x18\xb7\x8e\x91\x94\xa2\x8f\x17\x61\x0c\x29\xba\xad\xca\xfe\xb3\xf5\xc7\x20\x4b\x70\x88\x16\x20\xb4\x02\xab\x30\x4d\xc0\x0a\xf0\x18\xb1\x48\x5a\xa6\x8c\xf5\xaa\xfe\xf6\xcd\xac\x6c\xf6\x83\x03\xd3\x60\x5b\x2f\x61\x15\xbd\x7a\x89\x54\xd1\xeb\x6b\x3f\x43\x9c\xbf\x50\x16\xf5\xf3\xdc\xba\xa9\x25\x32\xba\x4d\xa5\x41\xa7\x72\xcc\x1c\xc2\x18\x11\xcc\x53\x8d\xca\xe6\x7b\x71\x7e\x3d\x9d\xfb\x8b\x8b\xa9\x7f\x52\x13\x92\x37\xbf\xfc\xfe\xf5\x72\x76\xe6\x9f\x5f\xef\xd5\xb1\x34\x86\x3c\xc1\xb6\x44\x21\xff\xab\x01\x90\x11\xad\x4d\x4b\x83\x3f\x69\xc0\x2d\x01\x86\x94\x3c\xe2\x52\x93\x2b\x9a\x0e\x55\x47\x73\x0b\xcc\x51\x90\x80\xda\xf5\x11\x25\x1c\x8c\xd4\x46\xf2\xc4\x67\x90\x80\xd0\xe9\xfb\x65\x3d\x77\x87\x48\x99\xb2\x96\x72\xba\x56\xa1\x44\x51\x8a\x89\xcb\x4a\xd5\xd7\x6c\xa4\xdc\xfd\x3a\xf6\xb5\xfa\xab\xc2\x30\xd9\x48\xe7\xb3\x79\x71\xc1\x7a\xce\x03\x79\x23\xba\x74\x20\xde\x18\x1a\xaa\xdf\xd7\xae\x0d\xb1\x2c\x71\x2b\xea\xd0\x4d\xf5\xd7\x33\x39\xd5\xf5\x6e\x1e\xdd\x5d\x3e\x0e\x02\x03\x14\x4d\xc9\x76\x26\xaf\xfb\x40\xbd\xb3\x3e\x07\x85\x12\x82\x66\xe1\x68\x50\x12\x1a\xa2\xa4\x2b\x21\x77\x0c\x8b\xcf\xa2\xe2\xad\xf9\xef\x36\x96\xf9\x06\x3c\xa2\xa9\xac\x3d\xfb\x8d\x39\x15\xa4\xd6\x82\x03\xa6\x6b\x61\xb7\x0b\xb5\x5d\xbd\xe6\xfa\xae\x1f\x31\xf6\x6d\x7f\x1d\x6b\x72\x47\x4f\xbd\x7f\xfc\x41\x2b\x75\xd2\xf1\x31\xc9\x6e\x9d\x59\x0f\x35\x7d\x53\xb3\x82\x9e\xb9\x6a\x37\x84\xf3\xa9\xa1\x1e\x3d\xd6\x4b\x46\x35\x33\x9f\x2e\xc5\xc3\xac\x97\xf7\x7e\x07\x00\x00\xff\xff\xdd\x49\xa7\x62\xfb\x0e\x00\x00")

func om_cluster_docsStandaloneJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsStandaloneJson,
		"om_cluster_docs/standalone.json",
	)
}

func om_cluster_docsStandaloneJson() (*asset, error) {
	bytes, err := om_cluster_docsStandaloneJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/standalone.json", size: 3835, mode: os.FileMode(420), modTime: time.Unix(1463774316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"om_cluster_docs/3_2_cluster.json": om_cluster_docs3_2_clusterJson,
	"om_cluster_docs/replica_set.json": om_cluster_docsReplica_setJson,
	"om_cluster_docs/standalone.json": om_cluster_docsStandaloneJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"om_cluster_docs": &bintree{nil, map[string]*bintree{
		"3_2_cluster.json": &bintree{om_cluster_docs3_2_clusterJson, map[string]*bintree{}},
		"replica_set.json": &bintree{om_cluster_docsReplica_setJson, map[string]*bintree{}},
		"standalone.json": &bintree{om_cluster_docsStandaloneJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

