package adapter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func om_cluster_docs_3_2_cluster_json() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xe4, 0x98,
		0x5b, 0x6f, 0x9b, 0x30, 0x14, 0xc7, 0xdf, 0xf3, 0x29, 0x10, 0xcf, 0x69,
		0x08, 0xb4, 0x49, 0xb7, 0xbc, 0xb5, 0x59, 0xa5, 0x4c, 0x5a, 0xd2, 0xa9,
		0x89, 0xba, 0x87, 0x36, 0x42, 0x06, 0x5c, 0xb0, 0x06, 0x18, 0xd9, 0x4e,
		0xa6, 0x6c, 0xca, 0x77, 0x9f, 0xcd, 0xdd, 0x04, 0xd8, 0x45, 0xcb, 0x40,
		0x2d, 0x6f, 0x70, 0xce, 0xf9, 0xfb, 0x5c, 0x7e, 0x38, 0x38, 0x3f, 0x06,
		0x0a, 0xbf, 0x70, 0xc4, 0x10, 0x0e, 0xe9, 0x4c, 0x49, 0x6e, 0xc5, 0xe5,
		0xe0, 0x6f, 0xa1, 0x8f, 0x81, 0x73, 0x0b, 0x28, 0x9c, 0x29, 0xaa, 0xb6,
		0x07, 0x44, 0xf3, 0x91, 0xa5, 0x05, 0x38, 0x74, 0xb1, 0x63, 0x5d, 0x04,
		0x01, 0xbd, 0x00, 0x3b, 0x86, 0x03, 0x20, 0x42, 0xd5, 0x61, 0x6d, 0xe0,
		0x17, 0x14, 0xf2, 0x5b, 0xae, 0xab, 0xce, 0x67, 0xcf, 0xcf, 0x0d, 0xa1,
		0x71, 0xe4, 0x31, 0x11, 0x88, 0x5d, 0x3e, 0x58, 0x8f, 0x90, 0xd0, 0x24,
		0xa1, 0xa7, 0x22, 0xa3, 0x10, 0x04, 0x22, 0x93, 0xcb, 0xd1, 0x78, 0x34,
		0xcd, 0x82, 0x94, 0x1a, 0xb3, 0x3e, 0xba, 0x4e, 0xcd, 0xdb, 0x44, 0xd4,
		0x02, 0xf6, 0xd7, 0x5d, 0x54, 0xab, 0xe9, 0x61, 0xca, 0xd2, 0xc0, 0xe5,
		0xcd, 0x7c, 0xf1, 0x71, 0x75, 0x67, 0x2e, 0xee, 0xd7, 0x9b, 0xd5, 0xcd,
		0xf2, 0xae, 0x54, 0x92, 0x8f, 0xdd, 0xcf, 0x80, 0x79, 0x79, 0x1b, 0xb0,
		0xdb, 0xd0, 0x06, 0x2d, 0x59, 0xea, 0x02, 0xb8, 0x30, 0x64, 0x23, 0xee,
		0x27, 0x8b, 0x3c, 0x60, 0x06, 0x18, 0x2c, 0x77, 0x59, 0x5c, 0x14, 0x7d,
		0x87, 0x1b, 0x8f, 0x40, 0xea, 0x61, 0xdf, 0x59, 0xde, 0xce, 0x14, 0x7d,
		0x3c, 0x1e, 0x0f, 0x25, 0x17, 0x86, 0x82, 0xc2, 0x65, 0x41, 0x78, 0x0d,
		0xc6, 0x55, 0xee, 0x70, 0x94, 0x8a, 0xe5, 0x89, 0x21, 0x86, 0x09, 0x0a,
		0xdd, 0xff, 0x52, 0x70, 0xb1, 0x5c, 0x97, 0x45, 0x47, 0x04, 0xdb, 0x90,
		0x52, 0x28, 0xd7, 0x0a, 0x88, 0x4b, 0x0d, 0x73, 0x5a, 0x5d, 0x3a, 0x84,
		0xac, 0xfa, 0x28, 0xd6, 0xc0, 0x84, 0x3f, 0x37, 0xde, 0xf1, 0x3c, 0x24,
		0xdb, 0x51, 0xce, 0x8a, 0xc0, 0xc8, 0x47, 0x76, 0x5c, 0x7c, 0x9d, 0x8a,
		0x30, 0xaf, 0x21, 0x5b, 0x25, 0x2d, 0xb6, 0xfc, 0x1d, 0x54, 0xdb, 0xd4,
		0x28, 0xef, 0x1d, 0xef, 0x5b, 0x9d, 0x92, 0x63, 0x65, 0x23, 0x60, 0x41,
		0xa4, 0x39, 0x80, 0x01, 0x4d, 0xc8, 0x99, 0xe3, 0x76, 0xc1, 0x03, 0x65,
		0x30, 0xf8, 0x84, 0xdd, 0x5a, 0x49, 0x48, 0x19, 0x0a, 0xd3, 0xdc, 0xd5,
		0x17, 0xe4, 0x43, 0x75, 0x78, 0xda, 0x87, 0xfa, 0x55, 0x33, 0x00, 0xe2,
		0x01, 0xcb, 0x19, 0x0c, 0x6a, 0x72, 0xf9, 0x6d, 0xce, 0xce, 0x84, 0xc7,
		0xb0, 0xba, 0x2f, 0xa4, 0xbd, 0x2b, 0x9e, 0xa7, 0xcc, 0x6c, 0x0e, 0x91,
		0x30, 0x27, 0xd5, 0x95, 0xcc, 0xfb, 0xe4, 0xed, 0xc9, 0x77, 0x94, 0xc2,
		0xc2, 0xe9, 0xf7, 0xd6, 0xb6, 0x07, 0x03, 0xf0, 0x98, 0xf9, 0x5c, 0x9e,
		0x6e, 0x47, 0x7f, 0x0b, 0x9f, 0xde, 0x6b, 0xf8, 0xf4, 0x4e, 0xe0, 0xd3,
		0x5f, 0x05, 0x7c, 0x7a, 0xff, 0xe1, 0x33, 0x7a, 0x0d, 0x9f, 0xd1, 0x09,
		0x7c, 0xc6, 0xab, 0x80, 0xcf, 0xe8, 0x3d, 0x7c, 0xfa, 0x75, 0x17, 0xd3,
		0x8d, 0xab, 0xa7, 0xe6, 0xe5, 0x1f, 0x0e, 0xd9, 0xf6, 0x77, 0x3c, 0x1f,
		0x92, 0x76, 0x77, 0x9e, 0xdc, 0xa9, 0x7d, 0x87, 0x20, 0x2b, 0xb6, 0x9d,
		0x05, 0xda, 0x03, 0x16, 0xde, 0xb7, 0xb2, 0xe0, 0x01, 0xe2, 0xf0, 0x2f,
		0xce, 0x3a, 0x89, 0x74, 0x30, 0x0f, 0xd8, 0x17, 0xf5, 0xd8, 0x38, 0x7c,
		0x41, 0x2e, 0xdd, 0x93, 0x7f, 0xbd, 0x15, 0x25, 0xc2, 0xe6, 0x55, 0x27,
		0x3b, 0x52, 0xb6, 0xf8, 0x59, 0x36, 0x26, 0xe0, 0x23, 0x40, 0xfb, 0x85,
		0x6d, 0xde, 0xec, 0xbe, 0x6f, 0x61, 0x46, 0xeb, 0xc9, 0xa1, 0x3f, 0xd8,
		0x4e, 0xba, 0xc4, 0x76, 0xf2, 0xc6, 0xb0, 0x9d, 0xf4, 0x1f, 0xdb, 0xd6,
		0x33, 0x47, 0x7f, 0xb0, 0x9d, 0x76, 0x89, 0xed, 0xf4, 0x8d, 0x61, 0x3b,
		0x3d, 0x2f, 0xb6, 0xe9, 0x1f, 0x37, 0xe9, 0x99, 0x82, 0x9f, 0x1b, 0xe4,
		0xbf, 0x6e, 0x4c, 0xe4, 0x64, 0x87, 0x88, 0x42, 0x2d, 0x80, 0x81, 0x05,
		0x89, 0xec, 0x98, 0x3b, 0x57, 0x2a, 0x17, 0xed, 0x2f, 0x4e, 0xfd, 0xa5,
		0x9a, 0x95, 0x9a, 0x58, 0xbd, 0x39, 0x56, 0xff, 0x55, 0xac, 0x21, 0xc7,
		0x02, 0x62, 0x21, 0xfe, 0x46, 0xdc, 0x87, 0xfe, 0x61, 0xa6, 0x30, 0xb2,
		0x83, 0xcd, 0xd2, 0x46, 0x05, 0xc1, 0x88, 0x20, 0x4c, 0x10, 0xe3, 0x71,
		0xc5, 0xcf, 0xc8, 0x71, 0x2b, 0xb5, 0xab, 0x78, 0x17, 0x4b, 0x2d, 0x48,
		0x06, 0xb6, 0x86, 0x64, 0x2f, 0x3e, 0x48, 0x9f, 0x24, 0xcd, 0xc6, 0x1f,
		0xd0, 0x13, 0xe3, 0xa4, 0xcd, 0x58, 0x7a, 0xf3, 0xb6, 0xb5, 0xd4, 0x9c,
		0x7e, 0x01, 0xc7, 0xa9, 0x36, 0xcc, 0xaa, 0x3a, 0x58, 0x71, 0x89, 0xb9,
		0x56, 0x4e, 0x8d, 0x79, 0xf1, 0x83, 0xe3, 0xe0, 0x67, 0x00, 0x00, 0x00,
		0xff, 0xff, 0xb5, 0x47, 0x39, 0xde, 0xa8, 0x16, 0x00, 0x00,
	},
		"om_cluster_docs/3_2_cluster.json",
	)
}

func om_cluster_docs_replica_set_json() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xdc, 0x56,
		0x5f, 0x6b, 0xdb, 0x3e, 0x14, 0x7d, 0xcf, 0xa7, 0x30, 0x7e, 0x4e, 0x62,
		0x5b, 0xfd, 0xf1, 0x63, 0xf8, 0xad, 0xed, 0x0a, 0x19, 0x2c, 0xe9, 0x58,
		0x42, 0xf7, 0xb0, 0x95, 0x20, 0xc7, 0x77, 0xb6, 0x98, 0xfe, 0x18, 0x49,
		0xe9, 0xc8, 0x86, 0xbf, 0xfb, 0x24, 0xff, 0x89, 0x23, 0xc7, 0xe9, 0xc6,
		0xa0, 0x59, 0xa8, 0xde, 0xa4, 0x7b, 0xcf, 0xd1, 0xbd, 0x47, 0xc7, 0xb2,
		0x7e, 0x8e, 0x3c, 0x33, 0x44, 0xa1, 0x89, 0xe0, 0x2a, 0xf6, 0xea, 0xa9,
		0x1d, 0xa9, 0xf8, 0xce, 0xa9, 0xc0, 0xe9, 0x0d, 0x56, 0x10, 0x7b, 0x7e,
		0xf0, 0x84, 0x65, 0x40, 0x49, 0x12, 0x30, 0xc1, 0x33, 0x91, 0x26, 0x13,
		0xc6, 0xd4, 0x04, 0x6f, 0xb5, 0x60, 0xd8, 0x42, 0xfd, 0xf1, 0x20, 0xf0,
		0x13, 0xe1, 0x66, 0x6a, 0x78, 0xfd, 0xdb, 0xf8, 0xcb, 0x09, 0x64, 0x05,
		0x2c, 0x6b, 0x7c, 0x95, 0xf2, 0x36, 0x79, 0x00, 0xa9, 0xea, 0x7a, 0x3e,
		0x77, 0x05, 0x71, 0xcc, 0x6c, 0x21, 0x57, 0xd3, 0x70, 0x1a, 0xb5, 0x20,
		0x6f, 0x30, 0x8c, 0x9a, 0xf0, 0x63, 0x4d, 0x9a, 0xe0, 0xcd, 0xb7, 0x6d,
		0x31, 0xc8, 0x99, 0x0b, 0xa5, 0x1b, 0xe0, 0xfc, 0xfa, 0x76, 0xf6, 0x6e,
		0x71, 0xb7, 0x9e, 0xdd, 0x2f, 0x57, 0x8b, 0xeb, 0xf9, 0xdd, 0x41, 0x47,
		0x54, 0x64, 0x1f, 0xb0, 0xce, 0xf7, 0x2a, 0x88, 0xec, 0x84, 0x0a, 0x41,
		0xbd, 0xd5, 0x04, 0x67, 0xc0, 0xf5, 0xd4, 0xe4, 0xb9, 0x24, 0x1f, 0x85,
		0xc6, 0x1a, 0x0e, 0x45, 0xb6, 0x43, 0x91, 0x1f, 0xb0, 0xca, 0x25, 0xa8,
		0x5c, 0xd0, 0x74, 0x7e, 0x13, 0x7b, 0x51, 0x18, 0x86, 0x63, 0x27, 0x45,
		0x13, 0xd6, 0xa5, 0xcc, 0xa4, 0xe9, 0x01, 0xfd, 0xb7, 0x4f, 0x28, 0x9d,
		0x66, 0x4d, 0x61, 0x44, 0x0b, 0x49, 0x78, 0x76, 0x96, 0x86, 0xbb, 0xed,
		0xfe, 0x65, 0xd3, 0x85, 0x14, 0x1b, 0x50, 0x0a, 0xdc, 0x5e, 0xb1, 0xcc,
		0x14, 0x5a, 0xff, 0xdf, 0xdf, 0x9a, 0x83, 0xee, 0x2f, 0x55, 0x1c, 0x42,
		0x9a, 0x75, 0xf4, 0xc6, 0xd4, 0xe1, 0xc4, 0x4a, 0xb7, 0x2a, 0x09, 0x05,
		0x25, 0x9b, 0xaa, 0xf9, 0x21, 0x16, 0x1b, 0x5e, 0x82, 0x5e, 0xd4, 0x12,
		0x27, 0x74, 0x0b, 0xfe, 0x73, 0x6c, 0xca, 0x68, 0x67, 0x74, 0x1b, 0x62,
		0x4a, 0x93, 0xf6, 0x08, 0x52, 0xac, 0x71, 0x60, 0xa9, 0xd6, 0xe1, 0xf3,
		0x64, 0x3b, 0xa5, 0x81, 0xbd, 0x17, 0xd9, 0x20, 0x1d, 0x28, 0x4d, 0x78,
		0x53, 0xb7, 0xff, 0x95, 0x50, 0xf0, 0xc7, 0xc7, 0x1a, 0x1c, 0xef, 0xd8,
		0x1e, 0x7c, 0x75, 0xb0, 0xee, 0xee, 0xa3, 0x81, 0x3a, 0xfe, 0xd8, 0x5f,
		0x2f, 0x64, 0x8b, 0x71, 0xff, 0x3e, 0x68, 0x74, 0xeb, 0xd6, 0x1b, 0xaf,
		0xac, 0x76, 0x85, 0x0d, 0xd7, 0xdd, 0x1d, 0x84, 0x9f, 0xea, 0xaf, 0x66,
		0x7f, 0xd1, 0x74, 0x11, 0xe3, 0xfa, 0x7c, 0xb9, 0xc9, 0x81, 0xe1, 0x87,
		0x36, 0xe7, 0xea, 0xf8, 0x1a, 0xfa, 0x5b, 0xd3, 0x45, 0x17, 0x6b, 0xba,
		0xe8, 0xec, 0xa6, 0x8b, 0x5e, 0x85, 0xe9, 0xa2, 0xcb, 0x37, 0x1d, 0xba,
		0x58, 0xd3, 0xa1, 0xb3, 0x9b, 0x0e, 0xbd, 0x0a, 0xd3, 0xa1, 0x97, 0x35,
		0x5d, 0xf3, 0xbf, 0x6d, 0xac, 0x61, 0x8e, 0xdf, 0xfd, 0xe3, 0xae, 0x49,
		0xda, 0x7a, 0xa1, 0x63, 0x63, 0xc0, 0x12, 0x90, 0x6e, 0xe2, 0x3e, 0xb9,
		0xd7, 0xb2, 0x15, 0xb5, 0xbb, 0xb4, 0x0f, 0x9a, 0xf5, 0x06, 0xb0, 0xd1,
		0x69, 0x6c, 0xf4, 0x3b, 0x2c, 0x72, 0xb1, 0x58, 0x26, 0x44, 0x83, 0xbc,
		0xe7, 0x74, 0x17, 0x7b, 0x5a, 0x6e, 0xe1, 0x34, 0x35, 0xea, 0xb9, 0xa9,
		0x90, 0xc4, 0xbc, 0x7f, 0xb4, 0xc1, 0x75, 0xef, 0x86, 0xf2, 0xd1, 0x95,
		0x4b, 0xd0, 0xea, 0x69, 0xd2, 0x4c, 0x55, 0x8e, 0x65, 0x6a, 0x5e, 0x4c,
		0x76, 0x65, 0x54, 0x8e, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xbe,
		0x35, 0x59, 0x82, 0x0b, 0x00, 0x00,
	},
		"om_cluster_docs/replica_set.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"om_cluster_docs/3_2_cluster.json": om_cluster_docs_3_2_cluster_json,
	"om_cluster_docs/replica_set.json": om_cluster_docs_replica_set_json,
}
