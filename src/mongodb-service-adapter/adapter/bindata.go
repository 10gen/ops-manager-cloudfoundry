// Code generated by go-bindata.
// sources:
// om_cluster_docs/replica_set.json
// om_cluster_docs/sharded_set.json
// om_cluster_docs/standalone.json
// DO NOT EDIT!

package adapter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _om_cluster_docsReplica_setJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x4d\x73\xa3\x38\x10\xbd\xfb\x57\xb8\xd8\xab\x3f\x88\xe3\x64\x93\x9c\xc6\x93\x1c\xe6\xb0\xd9\x4c\x25\x33\x93\xc3\x4c\xca\x25\x90\x30\xda\x11\x12\x25\x89\xc4\x0e\xc5\x7f\x5f\x49\x60\x8c\x40\x38\x9e\xaa\xf1\x66\x39\x99\x56\xab\xbb\xf5\xf4\x5e\xd3\xce\x07\x43\xf5\x78\x2c\x95\x98\x51\xe1\x5d\x0d\x4b\x83\x31\x42\xf6\x42\x09\x03\xf0\x23\x10\x48\xad\x78\xd3\x67\xc0\xa7\x04\x07\xd3\x84\xd1\x15\x83\xc1\x38\x49\xc4\x18\x64\x92\x25\x40\xef\xf6\x46\xee\xad\x8f\x98\xaa\x57\x1d\xdb\xbb\xbe\xfa\xf1\xa3\x67\xb3\xd9\x5b\x94\x21\x3c\xe3\x73\x13\x7c\x43\x5c\x54\x65\x7d\x6f\xd4\x15\x64\x98\x40\x63\xac\x6d\xdb\x27\xef\x58\xca\x1d\x58\x6a\xff\xf3\xf9\xc8\xbd\x1e\x11\xf0\xcc\xb8\xae\xd0\xeb\xf1\x58\x61\x59\x55\xa3\xbd\xe6\xb3\xf9\x65\x78\x02\x67\xc1\xd9\xe5\xe5\x25\x0a\x82\xe8\x24\x82\xd1\x69\x10\xfa\xc8\x47\xa7\xc1\x69\x14\x9d\x85\x3e\x00\xd1\xac\x2f\x5a\x02\xd6\x77\xa2\x11\xaf\xd7\x0f\xd3\xc3\xfc\x18\xcc\x08\x32\x90\x3c\xf5\xb8\xa4\x04\xc8\x88\xf1\x44\x87\x61\x62\xdd\x17\x29\xe3\x44\x7b\xc4\x52\xa6\xe2\x6a\x3a\x8d\x80\x90\x90\x4c\xaa\x3b\x9b\x30\xbe\x52\x04\xa0\xd9\xba\xa6\x80\x79\x1b\xaf\x2f\xce\x97\xe7\xf3\x31\x48\xc0\x2b\xa3\xe3\xd3\xc9\x6c\xf2\xe7\x44\xae\x5e\xfb\x92\xbc\x60\x3a\xf3\xfd\x8b\x94\x64\xba\xe4\x08\x10\x81\xfa\x3d\xbf\x5d\xdf\x23\x88\x85\xbc\x21\x64\x1f\x04\x0d\xcf\xbb\x9a\xcc\xbd\x68\x34\xbc\xbf\xf2\x43\xe3\x36\x2f\xa2\xe3\x5c\x58\x96\x46\x5e\x8f\x82\xc4\xc8\xc7\xc0\x52\xf1\xbc\x5a\xf7\x02\x10\xfe\xcc\xd2\x1e\x9e\xc7\x4c\xc8\xed\xe6\x3c\xa7\x0c\x22\x31\xf9\xee\x3f\x15\x45\x53\x69\x84\xad\x3e\x03\x19\xef\xf4\xc9\x56\x3d\xfa\x9c\x96\xc9\xc6\x60\x85\xa8\x9c\x28\xbf\x56\x98\x7b\x26\x81\x44\x56\x0b\x30\x4b\x02\xbf\xa2\x2f\x31\x47\x22\x66\x04\xde\x7e\x54\x0e\x27\xbe\xef\xdb\x70\x79\x12\x27\x3b\xa7\x4f\x5c\x1f\x65\x36\x1f\xd8\xe0\xe8\x53\xd7\xfa\xc6\x92\x71\x4c\x57\xff\xd1\xd1\x77\x09\xdf\xf7\xf8\xc6\x39\xe5\x2c\x44\x42\x94\x7a\xcd\xf3\x3f\x10\x08\xe3\xa1\x39\x63\xb1\x65\x51\x03\x0a\xc0\x57\x62\xb6\x3c\xef\x16\x46\x91\xec\x18\xcb\xf8\x8c\xeb\x95\xd9\x85\xaa\xd3\x5a\x2d\x5a\x55\x73\x94\x12\x1c\x96\xfd\xd7\x19\x49\x3b\x3c\x20\xf9\x77\x75\x13\x69\x18\x2d\xb5\xc9\xdb\x1b\x55\x28\xa0\x15\xc8\xee\x88\x30\xb0\xae\xec\x39\x04\xe9\x54\x6f\x40\xf5\xcd\x41\x20\xc1\x1b\x09\x36\x42\xa2\xe4\x2f\x75\x83\xee\x14\x48\x48\x4c\xb7\xa7\xf2\x22\x4c\x90\x43\xdc\x5e\xda\xad\x63\x23\x1a\x1c\x5a\xea\x1b\xd9\x56\x65\xf8\x62\x17\x35\x70\x94\xd7\xe2\xad\x8c\xb1\xe8\x50\xf6\x98\x3c\x73\x74\x1d\x57\x15\x15\x01\xbf\x6c\x52\xe3\x52\x9e\xb1\xe9\xf0\xbc\xeb\x74\x65\xd7\x6a\xac\x29\x55\xc5\x0f\x61\x8c\x12\xb0\xeb\x87\x67\x25\xc1\x15\x97\x71\x34\xfc\x40\xd4\x47\xa3\x50\x2f\x48\xf5\xf5\xa2\x18\xe5\xf9\x14\x47\x15\xb3\xd5\x6f\xcd\x76\xf3\xb6\x95\x43\xc5\x42\xc5\xb3\x76\x17\x58\x62\x68\xd1\xae\x51\x45\x82\x92\x00\xf1\xf6\x10\xe0\x16\x93\x59\xb1\x71\x2c\x23\xe7\xf9\x07\x35\x9b\xa0\x75\xd1\x66\x98\xbe\x46\x0b\x3c\x3b\xc7\xee\x90\x23\x25\x4f\x35\x5c\x20\x7e\x47\xc9\x46\xed\x90\x3c\x43\x23\x85\x2f\x56\xbd\x46\x6a\x83\x6f\x15\x51\x41\x52\x63\xd2\x84\xa3\x7c\x9e\xec\x56\xc1\x99\xfd\x59\xf7\x44\x0c\x38\x54\x6d\xac\xb2\x0d\xea\x2b\xb1\x47\x37\xdd\xfa\xbe\x0a\x64\x46\x9a\xfe\x29\x4d\x5b\x3f\xbf\xc0\xf2\xa4\xc3\x14\x08\xf1\xc2\x38\x1c\xda\x64\x81\x0a\x79\xb6\x49\x54\xd3\x5c\xa8\x34\xb7\x28\x8c\x01\xc5\x22\xe9\xce\x5f\xde\xc3\xf5\xfd\xe2\x76\xfc\xf0\x69\x31\x3e\xd9\x01\xd6\xfc\x12\xfe\x44\x9b\x2a\x97\xfa\xd5\x4a\xa3\x2c\x46\xa9\x96\x22\xff\x61\x81\xb0\xe4\x18\x32\x1a\xe1\x4a\xa1\x4b\x96\x4c\x74\xc4\x66\xad\x58\x80\x80\x20\xd8\x9d\x2a\xbc\x4c\xa1\x21\x6e\x10\x41\xd2\x2c\x37\x27\x83\x72\xed\x11\xd0\x6a\xc9\x3a\x95\xb3\x87\xe9\x2a\x01\x54\xd3\x99\xab\xb1\xd4\x77\xe6\x1c\x28\xdc\x13\xea\x01\x71\xad\xf8\xda\x31\x54\xe3\x93\x62\xde\x6d\xf9\x69\xeb\x4e\x24\xfa\x29\x3a\x56\xc7\x44\x64\xce\xbf\x65\x4a\xfb\x4b\xe9\x3a\x21\x56\x2e\x6e\xde\xec\xeb\xdb\xff\x7b\x24\x17\xc6\xdf\x8d\xa3\x3b\xca\xef\x2b\x81\x23\x00\x17\x74\x73\xa3\x3e\x7e\x81\xfe\xbb\xf5\x3e\x55\x68\x22\x18\x14\x8e\x56\x0a\x61\x21\x20\x87\x02\xf2\xa8\x9a\xe8\x7b\x41\xf1\x56\xfe\x5f\x16\x56\x73\xfa\x3e\xa2\xa8\xac\x73\x0e\x3b\x79\xea\x92\x7a\x1d\xf6\x88\xae\x07\xdd\x43\xa0\x3d\x54\x6b\xae\x7b\xfd\x1d\x69\xdf\xd6\xd7\xb1\x32\x1f\xa8\xa9\x5f\x4f\xbf\x57\x4a\x07\xf1\xf8\x98\x60\xf7\xe6\x6c\x9b\xba\xba\x69\x49\xc1\xe4\x5c\xf6\x0b\xc2\x39\x6a\xe8\xd1\xc6\x9a\x57\x74\xb0\xce\x80\x52\x0c\x8a\xc1\xbf\x01\x00\x00\xff\xff\xf4\x31\xf6\xbb\x02\x13\x00\x00")

func om_cluster_docsReplica_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsReplica_setJson,
		"om_cluster_docs/replica_set.json",
	)
}

func om_cluster_docsReplica_setJson() (*asset, error) {
	bytes, err := om_cluster_docsReplica_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/replica_set.json", size: 4866, mode: os.FileMode(420), modTime: time.Unix(1471360131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsSharded_setJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x4b\x6f\xdb\x38\x10\xbe\x2f\xb0\xff\xc1\xd0\x5e\x76\x81\xf8\x9d\x66\x9b\x9c\x9a\x26\x87\x2e\xb0\x69\x8b\xb8\x8f\x43\x1b\x18\x94\x48\x59\xdc\x52\xa4\x40\xd2\x4e\x5c\x43\xff\x7d\x87\x94\x6c\x51\x0f\xda\x6e\xbb\x1b\xa4\x46\x0e\x11\xf5\x71\x66\x38\xf3\xcd\x47\x52\x9b\x5f\x7f\xe9\xf5\x7a\x81\xc8\x34\x15\x5c\x05\x17\xbd\x62\xc0\xfe\x02\x2c\xee\x39\x13\x08\xbf\x44\x8a\xc0\xab\x60\xb8\x42\x72\xc8\x68\x38\x4c\x05\x5f\x08\x1c\xf6\xd3\x54\xf5\xd1\x52\x8b\x14\x99\xe9\xc1\x89\x67\xee\x47\xca\xe1\xd1\x58\x0f\xae\x2e\x3e\x7f\xf6\xcc\x2e\x26\xe7\xa5\x91\xc0\xa2\xae\xc3\x0f\x44\xaa\x32\xb4\x4f\x6e\x6c\xe1\x92\x32\x6c\x47\xab\xc1\xed\x6f\xd3\x1e\x2a\xe6\x50\x6d\x66\x9c\x9d\x9e\x78\x00\x31\x43\x2b\x21\x4d\x9c\x81\x0f\xb2\xa0\xba\x0c\xc9\xc0\x4e\x27\xa7\xe7\xd1\x18\x4f\xc2\x67\xe7\xe7\xe7\x24\x0c\xe3\x71\x8c\xe3\x69\x18\x8d\xc8\x88\x4c\xc3\x69\x1c\x3f\x8b\x46\x08\xc5\x13\xaf\xb9\x14\x3d\xbc\x51\x8e\x41\x3f\x90\xf2\x23\x81\x02\x2f\x19\xb1\x99\xb9\xf3\x61\x32\x86\x74\x2c\x64\x6a\x0c\x09\xf5\xe0\xb5\xb5\x94\xcc\x40\x12\xad\x33\x75\x31\x1c\xc6\x48\x69\xcc\x06\x65\xfd\x06\x42\x2e\x80\x0d\x7c\xf9\xb0\xe3\x83\x7d\xea\x3f\x3c\x3f\x9b\x9f\x9d\xf6\x51\x8a\xbe\x0a\xde\x9f\x0e\x26\x83\x3f\x07\x7a\xf1\xd5\xeb\xe5\x9e\xf2\xc9\x68\xf4\x3c\x63\x4b\x13\x75\x8c\x98\x22\x7b\xa0\x1f\xae\x6e\x09\xa6\x4a\x5f\x33\xb6\x37\x0f\x0e\xf4\xcd\x8e\xdd\xfe\x94\x38\xf0\xf7\xf2\x68\xcb\x6e\x41\xda\xe8\xbc\x3e\xe4\xfa\x0e\x38\x4a\x6d\x4f\xd9\xf4\x6c\xb9\xbf\x45\x04\x21\x8a\xbe\x2c\x33\x97\xfb\xc5\x0b\x03\xa8\xfa\x83\x6a\x21\x29\x5f\xb4\x61\x6e\xa3\x24\x42\xe9\xad\xb3\xcd\x86\x0b\x4c\xd4\xe0\xd3\xe8\x2e\xcf\x6b\xed\xca\xc4\xe2\x2d\xd2\x49\xd5\xe5\x62\xe1\xe9\xf2\x61\xe5\xb8\x8f\x16\x84\xeb\x01\x60\x9b\xb6\x6e\x85\x46\x9a\xd4\xe5\xc4\xbe\x53\xf4\x2b\x79\x97\x48\xa2\x12\xc1\xf0\xcd\x4b\x40\x8c\x47\xa3\x51\x23\xd3\x81\xa6\x69\x85\x7a\x25\xcd\xca\x26\xa7\x15\xa6\xcc\x6b\x5e\xe5\xc4\xce\xca\xa4\x88\x88\x52\x05\xf7\x37\x9b\xdf\x08\x8a\x92\x9e\x5d\x70\xbe\xab\x84\x9b\x19\x24\x17\x6a\x32\x3f\xeb\x88\x92\x13\xdd\x1e\x2d\x7c\x08\x69\x5e\x4d\x9e\x43\xd4\xf5\xd7\x79\x63\x11\x10\x00\x8d\x7b\xbf\x53\xf5\x17\x9f\x25\x48\xe2\xde\x0b\x50\x41\xf2\xf0\x47\xde\x60\x45\x20\x49\xc6\x68\x54\x68\x60\xb7\x53\x83\x98\x11\xfd\xba\xac\xa2\x32\xe6\xe6\x9b\x0d\xa6\xab\xd2\x68\x6f\xda\x83\x7a\x1e\x8a\x67\x48\xe3\xa6\xf3\x5d\x90\x57\x82\xc7\x74\xe1\x8d\xd1\xba\x84\x8a\x7b\x02\x8c\xa0\x75\x35\x91\xb7\x82\xd9\x00\x23\x6b\x4c\xad\xe4\x0f\x84\x94\x20\x35\x03\x96\x01\xc3\xfc\x41\x15\xef\x3d\x31\xe1\xb0\x46\xe8\x55\x84\xb2\xa1\x99\x41\x76\xbc\xc6\x48\xa3\xef\x89\x30\x50\x6b\x58\x6d\xfa\xb7\xf0\xa5\x03\x18\xa7\x29\xdf\x56\x34\x88\x29\xa4\xa5\x43\x4c\x82\xac\x1d\xe0\x5a\x39\xad\x37\x37\xe4\xdd\x86\x6b\xdb\xac\x11\xad\xd3\x12\x27\xde\x96\xd7\x09\x55\xed\x6e\xff\x9f\x3b\xb4\x4b\xea\x3a\x43\x29\x9b\xf6\xdd\x3a\x2b\x31\xce\x40\x59\xf9\xfa\x0c\x87\x1f\x86\x94\x04\x5f\x15\xe4\xeb\xa2\xc9\x96\x98\xbb\xae\x21\xb8\xbf\x1d\xaa\x99\x6c\x54\x39\x58\x55\xba\x5e\x08\xb4\x1b\x32\x68\x61\x32\x8b\x12\x92\xa2\x4a\xfe\x9f\x95\x92\x54\x44\xf7\x82\xc1\x4e\x99\xc3\x03\x81\xbd\x2c\xcf\x4f\x6a\x0e\xe0\xc1\x28\x53\xde\x94\xaf\x52\x07\xa0\xd1\x6b\x02\x96\x21\xa9\xa9\xa1\x12\xc1\xaf\xb7\x5a\xd6\x20\x69\x07\xb5\xe6\x14\xbb\x52\xd1\x95\xc8\x1d\x36\x25\x69\x48\x64\xcd\x69\x51\xa8\xee\xfd\xcf\x73\xba\x72\xdc\x56\xfe\x3c\x5b\x68\x91\x46\x09\xe7\x31\x22\xdf\x70\xb6\x3e\xb0\xed\x5b\x78\x42\x31\x26\xfc\x28\x24\xd0\xdf\xc7\xb7\x16\x38\x93\x14\xf6\x32\x6d\x42\x18\xef\xc3\x29\x38\x1a\x92\x6b\xc2\x90\x41\x36\xdb\xa1\x86\x5c\x09\x6d\xb7\xa0\x71\x37\xe6\x18\x8a\x34\x7f\x0d\xca\xb8\xbf\xbb\x83\x02\xd6\x35\xf3\x20\x65\xa6\x87\x98\xf2\xbd\xdc\xd8\x9b\xba\x47\xa0\x44\x79\x00\x3a\xbf\x7b\x72\xbc\xf0\xcc\x3d\x9c\xd2\xbd\xf1\x3d\x5e\x4a\xc7\xcd\x43\x65\x6b\xca\x4f\x94\xd3\xc9\x13\xc9\xe9\xf8\xe9\xe5\xf4\xb0\x06\x35\x36\x36\xe7\xf0\xe8\xc8\x46\x97\x04\x59\xa4\x57\x5e\xf6\xed\x88\x5d\x91\xee\xab\xb2\x46\x8b\xbd\xf7\x41\x0b\xfa\x86\x4d\x74\x37\xc7\xaa\x63\x7b\xca\xe3\xec\x05\x5d\x9a\xcd\xdd\x5b\x43\xf7\xf9\x67\x87\x2d\x0e\xee\x33\x22\x57\xf6\xcc\xd4\x99\x9d\x1a\xe8\xb6\x38\xb3\x1c\xda\x37\x22\xc1\x18\x89\xaa\x4b\xb8\x97\x2f\x25\x63\xcc\x09\x2b\xb8\xa8\xea\x17\xc0\x5d\x1b\x85\x8c\x40\x39\x1a\x3d\x64\xa0\xe2\xed\x3d\x2e\xba\x06\xa8\xa1\xd4\xbd\x80\xcb\x56\xad\x4a\x16\xf4\x5e\x99\x35\x05\xde\x4f\x56\x70\x6a\xcf\x98\x58\xa7\x70\xa3\xbd\x04\xf7\x37\x24\x4a\x10\xa7\x2a\x6d\xd3\x31\x98\x5d\xdd\x5e\xde\xf4\x67\xaf\x2e\xfb\xe3\xaa\xb0\x4e\xae\x82\x2f\x04\xba\xcc\xc4\x03\xff\x34\x42\x81\x11\x7b\x1f\xb8\x70\x4e\xfd\xff\x88\x50\xd5\x8e\xfc\x45\x8a\x8b\xa1\xb9\x48\x07\xc6\x9e\x63\x63\x09\x4b\x51\x1f\x11\xd7\x26\x21\xb5\xd8\x9a\x94\x87\x5b\x10\x78\x42\x38\xa5\xbc\x55\x98\x80\xc2\x3d\xde\xa6\xce\x9f\xb9\x12\x29\x85\xfd\xa2\x74\xf4\xa7\xb6\x7d\x6e\x1d\x93\x80\x29\xd9\x78\x53\x7c\x53\x38\xfc\x0d\xa5\xcd\x71\x9b\x8d\xb2\xb0\xcd\x4f\x13\x35\x7b\xf5\xcd\xe0\x67\xcd\xd4\xa5\x85\x76\xe4\xa9\x63\xf6\x8f\xba\x94\x04\xe1\x4b\xbe\xbe\x86\x7b\x72\x68\x3e\x01\x3f\x8e\x57\x53\x4f\xbb\xca\xff\xd6\x35\x13\x11\x62\x47\x2c\xf8\x23\xec\xa6\x8f\xb5\xd4\xbd\xfe\xbe\x85\xf8\xc5\xf7\xc2\x2e\xd2\x77\xea\x93\x15\x10\x38\x0c\x90\x42\x41\xee\x1a\x52\x59\xd3\x3f\xa3\xac\x6d\xc1\x03\xbb\xf0\xf7\x6f\x00\x00\x00\xff\xff\x0e\x7c\xa6\x2f\x3e\x18\x00\x00")

func om_cluster_docsSharded_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsSharded_setJson,
		"om_cluster_docs/sharded_set.json",
	)
}

func om_cluster_docsSharded_setJson() (*asset, error) {
	bytes, err := om_cluster_docsSharded_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/sharded_set.json", size: 6206, mode: os.FileMode(420), modTime: time.Unix(1471376593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsStandaloneJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xcf\x73\xda\x38\x14\xbe\xf3\x57\x30\x3e\x17\x70\x08\xc9\x26\xb9\xd1\xe4\xd0\xc3\x66\xda\x49\xda\xe6\xd0\x76\x98\x67\x4b\xb6\xb5\x95\x25\x8f\x24\x92\x90\x0c\xff\xfb\x4a\xb2\x01\x0b\x4b\xd4\x9d\x29\x9b\xf5\x09\x9e\x3e\xbd\x5f\xfa\xbe\x27\xbd\x0e\x86\xfa\x8b\x78\xa5\x08\x67\x32\xba\x1a\xd6\x06\x6b\x44\xfc\x89\x51\x0e\xe8\x3d\x48\xac\x57\xa2\xc9\x23\x88\x09\x25\xc9\xa4\xe4\x2c\xe7\x28\x19\x95\xa5\x1c\xc1\x52\xf1\x12\xcc\xee\xe8\x9d\x7f\xeb\x03\x61\xfa\xaf\xf1\x1d\x5d\x5f\x7d\xff\x1e\xd8\x6c\xf7\xae\x6b\x17\x91\xc5\xdc\x24\x5f\xb1\x90\x4d\x5a\xdf\x5a\x79\x25\x4b\x42\x91\x35\x6e\x6d\x9b\xef\xb5\x63\xa9\x77\x10\x65\xf0\xe7\xb3\x77\xfe\xf5\x8c\xc2\x23\x17\x26\xc3\x28\x80\xc8\x89\x6a\xb2\x31\xa8\xd9\x74\x76\x99\x9e\xa0\x69\x72\x76\x79\x79\x89\x93\x24\x3b\xc9\x50\x76\x9a\xa4\x31\x8e\xf1\x69\x72\x9a\x65\x67\x69\x0c\x90\x4d\x43\xde\x4a\x78\xfe\x28\x5b\xfe\x82\x38\xc2\xfa\xe1\x38\x5a\x52\x6c\x5b\xf2\x23\x00\xa9\x28\xa8\x8c\x8b\xd2\xb8\xe1\xf2\x39\xe4\x69\x29\xa8\x41\x14\x4a\x55\xf2\x6a\x32\xc9\x40\x2a\x44\xc7\xcd\x99\x8d\xb9\xc8\x35\x01\xd8\xf2\x79\x4b\x01\xfb\x6f\xf4\x7c\x71\xbe\x38\x9f\x8d\xa0\x84\x17\xce\x46\xa7\xe3\xe9\xf8\xaf\xb1\xca\x5f\x42\x41\x9e\x08\x9b\xc6\xf1\x45\x45\x97\x26\xe5\x0c\xa8\xc4\x61\xe4\xd7\xeb\x3b\x8c\x88\x54\x37\x94\x1e\x6a\x41\x0b\xf9\x71\x4b\xe6\x60\x37\x5a\xe8\x2f\xa2\xaf\xdf\xf6\x41\x74\xc0\x6b\xc7\xd2\x8a\x1b\x31\x28\xad\x7c\x6c\x5b\x1a\x9e\x37\xeb\x51\x02\xe9\xcf\x65\x15\xe0\x79\xc1\xa5\xda\x6c\x7e\x7d\x65\x1c\x61\x39\xfe\x16\xff\x58\xaf\xdb\x4a\xa3\x3c\xff\x04\xaa\xd8\xe9\x93\xe7\x01\x7d\x4e\xea\x60\x23\xc8\x31\x53\x63\x8d\xdb\x73\x73\xc7\x15\x28\xec\x8c\x00\xbb\x24\xc9\x0b\xfe\x5c\x08\x2c\x0b\x4e\xd1\xed\x7b\x0d\x38\x89\xe3\xd8\x6d\x57\xa4\x48\xb9\x03\x7d\x10\xa6\x94\xe9\x6c\xe0\x36\xc7\x54\xbd\xd5\x37\x51\x5c\x10\x96\xff\x47\xa5\xef\x02\xbe\x6d\xf9\x16\x5c\x09\x9e\x62\x29\xf1\x7e\xd1\x20\x72\x39\x5d\x9c\x77\x53\x60\x58\x75\x8c\xb5\x27\x2e\xcc\xca\xf4\x42\x67\xe4\xac\xae\xf7\xf2\x93\xba\x78\x5d\xb8\xdf\x0b\x4a\x9c\x36\x3e\xa6\x50\x4d\xcc\x06\xbc\xed\x26\x02\x05\xd1\xe1\x00\x2b\xa9\x70\xf9\xb7\xee\xaa\x3f\x04\x96\x8a\xb0\x7a\xd2\xeb\x38\x19\xa1\xd8\x23\xb8\xa8\xea\xe6\xb1\x92\xad\x73\x5d\x18\x26\x6c\xb2\xb2\x67\xe8\x26\x35\xf0\xa4\xd7\x9b\x4b\xc7\x24\x80\x67\x1c\x04\x53\x69\xe8\xf1\x79\x55\x59\x5c\x5d\x6d\x1b\xf0\xb8\x9b\x43\xf5\x4c\x69\xad\x69\xce\x17\xf7\x69\x81\x4b\xd8\x4d\xab\x33\x97\x7e\x02\x57\x94\xa4\x70\x8f\x55\x7b\x44\x46\x82\xbb\x37\x48\x24\x0b\x10\x48\x2b\xa6\xb1\x0d\xb6\xfe\xdd\x57\x82\x51\xd9\x17\x89\xed\xed\x19\x7e\x10\x18\xeb\xa7\x27\x54\x17\x3e\xac\x40\xca\x27\x2e\xd0\xd0\xad\x1c\xe9\xcc\xf8\xaa\xd4\xfa\x9c\xeb\x30\xb7\x38\x2d\x80\x11\x59\x76\xaf\xfa\xe8\xfe\xfa\x6e\x7e\x3b\xba\xff\x30\x1f\x9d\xec\x28\xd0\x1e\xba\x3f\xf1\xaa\x89\xa5\x7f\xed\x85\xd1\x16\x4b\x40\x87\x68\xff\xf0\x44\x3a\x2c\x4b\x39\xcb\x48\x43\xbc\x05\x2f\xc7\xc6\x63\x3b\x57\x22\x21\xa1\x18\x75\x2f\xb0\x68\xa9\xbb\x21\x6f\x30\xc5\xca\x2e\xb7\x2f\xa1\x7a\xed\x01\x58\xb3\xe4\x54\xe5\x95\xa6\xc9\x12\x90\x7e\x08\xf8\xf4\xb2\x3d\x33\xef\xdd\xe5\x7f\x0c\xf5\xf0\xeb\xf8\x37\xc0\x54\xdf\xd4\x0a\x8b\xdb\x7a\x8a\x76\x2f\x3f\xf3\xad\x3b\x56\xcf\xe5\x6b\xeb\xdf\x30\x65\x7f\x28\xfb\x2a\x24\x1a\xe2\xe7\xcd\xa1\x71\xf4\xbf\xef\xe4\xdc\xe2\xfd\x7d\xf4\x7b\xf9\x73\x29\x08\x0c\x68\xce\x56\x37\x7a\xa6\x27\xe6\x65\xff\x36\x59\x18\x22\xd8\x2e\x1c\x2d\x15\xca\x53\xa0\x7d\x1b\xf2\x20\x88\x7a\xab\x56\xfc\x2a\xfe\x6f\x0b\xab\xfd\xd0\x3b\xa2\xa8\x9c\x3a\x87\x9d\x38\xdb\x94\x82\x80\x03\xa2\x0b\x74\xb7\x4f\x6b\xfb\x6a\xcd\x77\xae\x7f\x22\xec\xaf\xf5\x75\xac\xc8\x3d\x35\xf5\xfb\xe1\x0f\x4a\xa9\x17\x8f\x8f\xd9\xec\x60\xcc\x7d\x53\x57\x37\x7b\x52\xb0\x31\x17\x61\x41\x78\x9f\x1a\xe6\x69\xe3\xbc\x57\x8c\xb3\xce\x03\x65\x3d\x58\x0f\xfe\x0d\x00\x00\xff\xff\x44\xd4\x65\x75\x6d\x11\x00\x00")

func om_cluster_docsStandaloneJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsStandaloneJson,
		"om_cluster_docs/standalone.json",
	)
}

func om_cluster_docsStandaloneJson() (*asset, error) {
	bytes, err := om_cluster_docsStandaloneJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/standalone.json", size: 4461, mode: os.FileMode(420), modTime: time.Unix(1471360131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"om_cluster_docs/replica_set.json": om_cluster_docsReplica_setJson,
	"om_cluster_docs/sharded_set.json": om_cluster_docsSharded_setJson,
	"om_cluster_docs/standalone.json": om_cluster_docsStandaloneJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"om_cluster_docs": &bintree{nil, map[string]*bintree{
		"replica_set.json": &bintree{om_cluster_docsReplica_setJson, map[string]*bintree{}},
		"sharded_set.json": &bintree{om_cluster_docsSharded_setJson, map[string]*bintree{}},
		"standalone.json": &bintree{om_cluster_docsStandaloneJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

