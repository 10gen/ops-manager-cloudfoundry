// Code generated by go-bindata.
// sources:
// om_cluster_docs/sharded_set.json
// om_cluster_docs/single_replica_set.json
// om_cluster_docs/standalone.json
// DO NOT EDIT!

package adapter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sharded_setJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4b\x6f\xdb\x38\x17\xdd\x17\xe8\x7f\x10\xd8\xcd\xf7\x01\xf1\x33\x69\xa6\xf1\xaa\x6d\x02\xcc\x0c\x30\x69\x8a\xa4\x8f\x45\x1b\x04\x94\x78\x25\x71\x42\x91\x02\x49\x3b\x71\x05\xfd\xf7\x01\x29\xd9\xa2\x1e\xb4\xd3\x76\x26\x48\xbd\x33\x75\xee\x43\xf7\x9e\x7b\x48\xb1\x78\xfe\x2c\x08\x02\x24\x72\x4d\x05\x57\x68\x11\x54\x0b\xf6\x87\x88\xb8\xe3\x4c\x60\xf2\x16\x2b\x40\x8b\x00\x4d\x56\x58\x4e\x18\x0d\x27\x99\xe0\x89\x20\xe1\x28\xcb\xd4\x08\x2f\xb5\xc8\xb0\x31\x47\x07\x1e\xdb\xcf\x94\x13\x71\x67\xbc\xa3\xd3\xc5\xd7\xaf\x1e\xeb\xca\xb8\xac\x9d\x20\x8b\x3a\x0b\x3f\x81\x54\x75\x6a\x5f\xdc\xdc\xc2\x25\x65\xc4\xae\x36\x8b\x9b\x5f\xd1\x5f\xaa\x6c\xa8\x36\x16\xc7\x47\x07\x1e\x40\xcc\xf0\x4a\x48\x93\x27\xf2\x41\x12\xaa\xeb\x94\x0c\xec\x68\x7e\x74\x12\xcd\xc8\x3c\x7c\x79\x72\x72\x02\x61\x18\xcf\x62\x12\x1f\x86\xd1\x14\xa6\x70\x18\x1e\xc6\xf1\xcb\x68\x8a\x71\x3c\xf7\xba\xcb\xf0\xfd\x85\x72\x1c\xfa\x81\x94\x3f\x10\x28\xc8\x92\x81\xad\xcc\xb5\x0f\x93\x33\xac\x63\x21\x33\xe3\x48\xa8\x7b\xaf\xaf\xa5\x64\x06\x92\x6a\x9d\xab\xc5\x64\x12\x63\xa5\x09\x1b\xd7\xfd\x1b\x0b\x99\x4c\x18\xe5\xcb\xfb\x2d\x1f\xec\xbf\xd1\xfd\xab\xe3\x9b\xe3\xa3\x11\xce\xf0\x37\xc1\x47\x87\xe3\xf9\xf8\xb7\xb1\x4e\xbe\x79\xa3\xdc\x51\x3e\x9f\x4e\x5f\xe5\x6c\x69\xb2\x8e\x31\x53\xb0\x03\xfa\xe9\xf4\x12\x08\x55\xfa\x8c\xb1\x9d\x75\x70\xa0\x17\x5b\x76\xfb\x4b\xe2\xc0\x3f\xca\x07\x7b\x76\x1b\xd2\x47\x97\xed\x25\x37\x36\xe2\x38\xb3\x33\x55\x14\xab\xca\x47\x59\x6e\x26\x60\x83\x43\x21\x8e\x6e\x97\xb9\x3b\x01\xd5\x03\x03\x68\xa6\x84\x6a\x21\x29\x4f\xfa\x30\x77\x5c\x52\xa1\x74\x13\x92\x0b\x02\x6a\xfc\x65\x7a\x5d\x96\xad\xa1\x65\x22\x79\x8f\x75\xda\xcc\xba\x48\x3c\xb3\x3e\x69\x02\x8f\x70\x02\x5c\x8f\x99\x48\xba\xbe\x2e\x85\xc6\x1a\xda\xa2\x62\x9f\x29\xfa\x0d\x3e\xa4\x12\x54\x2a\x18\x39\x7f\x8b\x16\xc1\x6c\x3a\x9d\x76\xea\x8d\x34\xcd\x1a\xd4\x1f\xd2\xbc\xd9\xfc\xa8\xc1\xd4\xd5\x2d\x9b\x9a\x58\xab\x5c\x8a\x08\x94\xaa\x26\xa0\x28\x5e\x00\x8e\xd2\xc0\xbe\x70\xb9\xed\x87\x5b\x19\x2c\x13\x35\xbf\x39\x1e\xc8\x92\x83\xee\xaf\x56\x31\x84\x34\x8f\xe6\xaf\xa6\xd3\x69\xfb\x71\xd9\x79\x89\xa2\x78\x41\xe3\xe0\x7f\x54\xfd\xc9\xaf\x52\x2c\x49\xf0\x9a\x72\x02\xf7\xff\x2f\x3b\xdc\x40\x12\x72\x46\xa3\x4a\x09\x87\x83\x1a\xc4\x15\xe8\x77\x75\x17\x95\x71\x77\x53\x14\x84\xae\x6a\xa7\xc1\x61\xb0\x25\x91\x3f\x9f\x09\x8d\xbb\xc1\xb7\x49\x9e\x0a\x1e\xd3\xc4\x9b\xa3\x0d\x49\x79\xe2\x49\x30\x62\x4b\xa5\x41\x5e\x0a\x66\x13\x8c\xac\x33\xb5\x92\x3f\x91\x52\x8a\xd5\x95\x16\x12\x27\xe0\x4f\xaa\x7a\xee\xc9\x89\x84\x2d\x42\xaf\x22\x9c\x4f\x8c\x05\x6c\x79\x4d\xb0\xc6\x3f\x92\x21\x52\x6b\xa5\x21\xfb\x4b\xf8\xca\x41\x40\x69\xca\x37\x1d\x45\x31\x65\x30\x24\x29\x28\xef\x27\xb8\x56\xce\xe8\xdd\x18\xf2\x6e\xd2\xb5\x63\xd6\xc9\xd6\x19\x89\x03\xef\xc8\xeb\x94\xaa\xfe\xb4\xff\xc7\x13\x3a\x2c\x78\x03\xa9\xd4\x43\xfb\x61\x9d\xd7\x18\x67\xa1\xee\x7c\xdb\xc2\xe1\x87\x21\x25\x90\xd3\x8a\x7c\x43\x34\xd9\x10\x73\x3b\x35\x40\x46\x9b\xa5\x96\xcb\x4e\x97\xd1\xaa\x51\x77\x57\xa6\xdd\xc4\xf1\x52\xa7\x57\x51\x0a\x19\x6e\xb6\x82\x97\xb5\x30\x55\x39\xbe\x66\x58\xe9\xb2\x2c\x0a\x60\x0a\xca\xf2\xa0\x15\xa6\x28\x26\x46\x9f\xca\xae\x88\xd5\x6a\x70\x05\xba\x25\x63\x39\x96\x9a\x1a\x42\x01\x79\xb7\x51\xb4\x0e\x55\x07\x08\x76\x43\x89\x2b\x18\x43\xe5\xdc\x62\x33\xc8\x42\x90\xad\xa0\x55\xbb\x86\xf7\x42\xcf\x49\xcb\x09\xdb\xc4\xf3\x6c\xa7\x55\x19\x65\x48\x35\xc8\x0b\xce\xd6\x7b\x8e\x00\x16\x9e\x52\x42\x80\x3f\x08\x29\x94\xf6\xb1\xae\x07\xce\x25\x15\x92\x6a\x93\xc2\x6c\x17\x4e\x31\xbc\x82\x33\x60\xd8\x20\xbb\x43\xd1\x42\xae\x84\xb6\x1b\xd1\x6c\x18\xf3\x10\x8a\x74\x7f\x1d\xca\xb8\xbf\xeb\xbd\x32\x36\x64\xb9\x97\x32\x87\xfb\x98\xf2\xa3\xdc\xd8\x59\xba\x47\xa0\x44\x7d\x0c\x3a\xb9\x7e\x72\xbc\xf0\xd8\xee\x2f\xe9\xce\xfc\x1e\xaf\xa4\xb3\xee\xd1\xb2\x67\xf2\x0b\xd5\x74\xfe\x44\x6a\x3a\x7b\x7a\x35\xdd\xaf\x41\x9d\x8d\xcd\x39\x42\x3a\xb2\x31\x24\x41\x16\xe9\x95\x97\x5d\x3b\xe2\x50\xa6\xbb\xba\xac\x71\xb2\xf3\xdb\x30\xf8\xce\x4d\x74\x6b\x63\xd5\xb1\x6f\xf2\x38\x7b\xc1\x90\x66\x73\xf7\xdb\x61\xf8\x14\xb4\xc5\x56\xc7\xf7\x2b\x90\x2b\x7b\x72\x1a\xac\x4e\x0b\x74\x59\x9d\x59\xf6\xed\x1b\x91\x60\x0c\xa2\xe6\x83\xdc\xcb\x97\x9a\x31\xe6\x84\x85\x16\x4d\xff\x10\xa1\x0a\x87\x0c\x08\x5a\x74\x66\xc8\x40\xc5\xfb\x3b\x52\x4d\x4d\x90\x63\xa5\xee\x84\x24\x41\xab\x4b\x16\xf4\x51\x99\x77\x42\xde\xeb\x2b\x44\x20\x67\x62\x9d\x01\xd7\x6f\x96\x3a\x3d\x87\x28\xc5\x9c\xaa\xac\x4f\x47\x74\x7e\xf1\xee\xf7\x8b\xb3\xb7\xa3\xd3\xcb\xa6\xaf\x4e\xa9\xd0\x2d\xac\xd1\xc2\xa4\x73\x0b\xeb\x4e\x26\xb7\xb0\xb6\x1f\x05\x0b\xe7\xe8\xff\xb7\x08\x55\xeb\xdc\x5f\x55\xb8\x5a\xba\x11\xd9\xd8\xf8\x73\x7c\x2c\x15\x48\xf5\x19\x73\x6d\xea\xd1\x4a\xad\xcb\x78\x44\x42\xb4\x40\x98\x64\x94\xf7\xfa\x82\x28\xa7\xda\x56\xce\x5f\xb8\x1a\x29\x85\xbd\x5c\x7a\xf0\xad\xdb\xae\xb0\x8e\x4b\xb4\xd8\x9c\xd2\xcf\xab\x8b\x85\xfd\xd7\x29\x7d\x8a\xdb\x6a\xd4\x7d\xed\xde\x4f\xb4\xfc\xb5\xf7\x82\x5f\xb5\x52\x6f\x2c\x74\xa0\x4e\x03\xd6\x3f\x1b\x52\x02\x26\x6f\xf8\xfa\x0c\x6b\x1c\x62\x05\x8f\x14\xd5\xf4\xd3\xbe\xe5\xbf\x1b\x9a\x89\x08\xb3\x07\xbc\xf0\x67\x49\xf5\x63\xbd\xea\xce\x78\xdf\x43\xfc\xea\xd2\x70\x88\xf4\x83\xfa\x64\x05\xe4\x0c\x18\x54\x0a\x72\xdd\x51\xca\x96\xfc\x19\x61\xed\xe9\x5d\xf9\xfc\x59\xf9\xfc\xd9\x3f\x01\x00\x00\xff\xff\xf7\x58\x9b\x73\x48\x18\x00\x00")

func sharded_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_sharded_setJson,
		"sharded_set.json",
	)
}

func sharded_setJson() (*asset, error) {
	bytes, err := sharded_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sharded_set.json", size: 6216, mode: os.FileMode(420), modTime: time.Unix(1497360978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _single_replica_setJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4b\x53\xdb\x3a\x14\xde\xe7\x57\x78\xd4\x2d\x49\x4c\x78\x5c\xc8\xaa\x14\x16\x5d\x5c\x2e\x1d\x68\xcb\xa2\x65\x32\xb2\x75\x6c\xeb\x22\x4b\x1e\x49\x06\x82\xc7\xff\xfd\x8e\x64\xe3\x58\x7e\x40\x3a\xd3\x5c\xca\x2e\xd2\xa7\xf3\xfc\xbe\xe3\x43\x31\xf1\x3c\xcf\x43\x22\xd3\x54\x70\x85\x96\x5e\x75\x60\x0f\x89\x78\xe4\x4c\x60\xf2\x09\x2b\x40\x4b\x0f\xcd\x1f\xb0\x9c\x33\x1a\xcc\x53\xc1\x63\x41\x82\x69\x9a\xaa\x29\xce\xb5\x48\xb1\x79\x8d\xf6\x86\x9f\xde\x52\x4e\xc4\xa3\xb1\x8d\xce\x97\x3f\x7f\x8e\x3c\xb6\x6f\xcb\xca\x04\xb2\x98\x8b\xe0\x3b\x48\x55\x87\xf5\xa3\x15\x57\x90\x53\x46\xec\x61\x73\xf6\xf2\x57\xf4\x4e\xaa\x17\x54\x1b\xfc\xf1\xe1\xde\xf0\x7d\xc4\xf0\x83\x90\x26\x42\x34\x82\x88\xa9\xae\xa3\x31\xa8\xc3\xc5\xe1\x69\xb8\x4f\x16\xc1\xd1\xe9\xe9\x29\x04\x41\xb4\x1f\x91\xe8\x20\x08\x7d\xf0\xe1\x20\x38\x88\xa2\xa3\xd0\xc7\x38\x5a\x8c\x59\x4b\xf1\xd3\x95\x6a\xd9\x1b\xc5\x51\xbe\x1d\x4e\x90\x9c\x81\x2d\xc9\xdd\x08\x24\x63\x58\x47\x42\xa6\xc6\x8c\x50\x4f\x63\x96\x72\xc9\x0c\x22\xd1\x3a\x53\xcb\xf9\x3c\xc2\x4a\x13\x36\xab\x7b\x36\x13\x32\x9e\x33\xca\xf3\xa7\x86\x02\xf6\xd7\xf4\xe9\xe4\x78\x75\x7c\x38\xc5\x29\x7e\x16\x7c\x7a\x30\x5b\xcc\xfe\x9a\xe9\xf8\x79\xcc\xc9\x23\xe5\x0b\xdf\x3f\xc9\x58\x6e\x42\x8e\x30\x53\x30\x8e\xfc\x7e\x7e\x0d\x84\x2a\x7d\xc1\xd8\x6b\x25\x68\x21\xaf\x1a\x32\x8f\x56\xa3\x85\xfe\x26\xb7\xb5\xdb\x6e\x44\x0f\x5c\x3a\x27\x2d\xbf\x88\xe3\xd4\xca\xa7\x28\x1e\x2a\x03\x65\x59\xb3\xbd\x46\xa1\x00\x87\xf7\x79\x36\xc2\xf6\x44\x28\xbd\x31\xc1\x05\x01\x35\xfb\xe1\xdf\x95\x65\x5b\x6f\x4c\xc4\x5f\xb0\x4e\x36\x2a\x15\xf1\x88\x4a\xe7\x95\xb3\x29\x8e\x81\xeb\x19\x13\x71\xc7\xcc\xb5\xd0\x58\x83\x33\x08\xec\x95\xa2\xcf\xf0\x35\x91\xa0\x12\xc1\xc8\xe5\x27\xb4\xf4\xf6\x7d\xdf\x77\x8b\x86\x34\x4d\x37\xa0\xcf\xd2\xa4\xb2\x38\x9c\xb8\x25\x32\x59\x37\x2a\xa7\x5a\x48\xca\xe3\xff\x29\xf5\x8d\xc3\xf7\x4d\xdf\x82\x33\x29\x42\x50\xaa\x52\x6d\x51\x7c\x00\x1c\x26\x9e\xcd\xb1\x7c\xe1\x52\xab\x14\x58\xc6\x6a\xb1\x3a\xee\x07\xc6\x41\xf7\x0e\x2b\xfb\x42\x9a\x9b\xc5\x89\xef\xfb\xce\x6d\xd9\x89\x5a\x42\xc6\x68\x58\x4d\xe1\x41\x4b\x06\x70\x03\xfa\x9f\xba\x13\x59\x18\xad\xcc\x11\x7a\xd5\xaa\xd2\x42\xe2\xb8\x5f\x49\x7b\x49\x02\xa7\x65\x0f\x21\xce\xe6\xe6\x01\x34\x9d\x23\x58\xe3\x37\x1c\xac\x95\x86\xf4\x6f\x11\x8f\xb8\x00\xa5\x29\x7f\xc9\x0a\x45\x94\xc1\x80\xc4\x51\xd6\x8f\x63\xad\x5a\x1c\x5a\x99\x8e\xbc\x44\x65\xf9\xe2\x06\x35\x19\x08\xaf\xc3\x5b\x9d\x50\xd5\xa3\xec\x2e\x79\x36\x38\x7b\xfa\x51\xd4\x04\xfc\xba\xce\x2c\xa4\xca\xb1\x0d\x78\xd8\xcc\xbb\xf6\xec\x6a\x21\x70\xae\x93\x9b\x30\x81\x14\x6f\x66\xe3\x51\x45\xf3\xa2\xf8\x40\x23\xef\x23\xc3\x4a\x97\x65\x51\x00\x53\x50\x96\x7b\x45\x31\xa7\x51\xcd\xef\xa2\x98\x1b\xce\xdb\x5f\x2f\xa2\xa8\xb9\x78\x03\xba\x3b\x0b\x56\x94\x38\xe4\x6b\x45\x91\x42\x1a\x80\xec\x2e\x04\xc3\x92\xf2\x7a\x4b\x42\x6d\xb9\x28\x3e\x52\x4e\xe0\xa9\xec\xf2\xcc\x34\xd3\x29\xa1\xeb\x63\x93\xe4\x1e\xc2\x32\xa0\x1a\xe4\x15\x67\x6b\xb4\xf4\xb4\xcc\x61\x0f\x65\x92\x0a\x49\xb5\x39\xf0\x9d\x20\xea\x92\x34\x35\x69\x97\xa3\xfa\xbb\x73\x07\x86\x14\xee\x27\x1e\xa9\x04\x4b\x42\x79\x5c\x9f\x4d\x9a\x96\xb8\x6b\x9c\x19\x80\xdf\x14\xd8\xf5\x66\x7c\x63\x33\xa7\x5f\x1e\x49\x95\xa9\x97\x61\xa5\x1e\x85\x24\x9e\xdb\x6f\x02\x19\x13\xeb\x14\xb8\x3e\xcb\x75\x72\x09\x61\x82\x39\x55\x69\x7f\x17\x43\x37\xe7\xd7\x67\x97\xd3\x9b\xcf\x67\xd3\xfd\x4d\xc1\xda\x5f\xc5\x7b\x58\xd7\xbe\xee\x61\xdd\x71\x73\x0f\x6b\xab\x57\x47\x97\xff\x8a\x40\x39\xa2\x0c\x05\x8f\x68\xad\xd3\x95\x48\x67\xc6\x62\x3b\x56\xaa\x70\xc0\x80\xf4\x37\x0c\x94\x2b\x90\xea\x02\x18\x68\x7b\xdd\xde\x12\xaa\xbb\x5b\xcc\xeb\x2b\x27\xab\xc1\x49\x66\xa2\xc4\x24\xa5\x7c\x68\xbc\x34\x3d\x1b\x5c\x2e\x86\xb7\xd5\x2d\xec\x3a\xf6\x0d\x30\x64\xb9\xd2\x20\x2f\xab\x0f\x5c\x7f\x3b\xf1\x7a\x1b\x8a\xe7\xf6\xa3\xb1\x98\xb7\x98\xd2\xfd\x5e\x0e\x65\x48\x39\xd5\xc3\xbc\x79\x6d\x7a\xff\xf1\x95\x3c\xb3\xf8\xe1\x3a\x0e\x5b\xf9\x7d\x21\x48\xc0\xe4\x8c\xaf\x2f\xb0\xc6\x81\xf9\xd7\xeb\x7d\xa2\x30\x44\xb0\x55\xd8\x59\x28\x4c\x84\x98\x6d\x5b\x90\x5b\x49\xf5\x7b\x95\xe2\x2d\xff\xbf\x2c\xac\xf6\x0e\xbe\x43\x51\x39\x79\x7a\x3d\x3f\x4d\x48\xa3\x80\x57\x44\x37\x52\xdd\x6d\x4a\xbb\xad\xd6\x86\xfa\xfa\x3b\xdc\xbe\xad\xaf\x5d\x79\xde\x52\x53\xbf\xee\xfe\x55\x29\x6d\xc5\xe3\x5d\x16\x7b\xd4\x67\xf7\xa8\xaf\x9b\x8e\x14\xac\xcf\xd5\xb8\x20\x06\x57\x0d\xb3\xda\x38\xfb\x8a\x31\xd6\x5b\x50\xca\x49\x39\xf9\x2f\x00\x00\xff\xff\x79\x43\xed\xa1\x0e\x13\x00\x00")

func single_replica_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_single_replica_setJson,
		"single_replica_set.json",
	)
}

func single_replica_setJson() (*asset, error) {
	bytes, err := single_replica_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "single_replica_set.json", size: 4878, mode: os.FileMode(420), modTime: time.Unix(1497360978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _standaloneJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x73\xda\x3a\x10\xbe\xf3\x2b\x3c\x3a\x17\x70\x08\xc9\x4b\xb8\xd1\xe4\xd0\xc3\xcb\xb4\x93\xb4\xcd\xa1\xed\x30\x6b\x6b\x6d\xeb\x45\x96\x3c\x92\x0c\x21\x19\xfe\xfb\x1b\xd9\x2e\x58\xd8\xa2\x74\xa6\xbc\x3c\x6e\xac\x3e\xef\x7e\xbb\xda\x6f\xb5\xaf\x83\x20\x08\x02\x22\x0b\xc3\xa4\xd0\x64\x16\xd4\x86\xca\x48\xe5\x4a\x70\x09\xf4\x3d\x68\x24\xb3\x80\x8c\x97\xa0\xc6\x9c\x45\xe3\x5c\x8a\x54\xd2\x68\x98\xe7\x7a\x08\xa5\x91\x39\xd8\xaf\xc9\xbb\xfe\x4f\x1f\x99\xa0\x72\x65\x7d\x93\x9b\xd9\xf7\xef\x9e\x8f\xab\x6f\x37\xb5\x0b\x52\x61\x6e\xa3\xaf\xa8\x74\x43\xeb\x5b\x8b\x57\x54\x32\x4e\x2b\xe3\xd6\xf6\xf3\xf7\xda\xb1\xd4\x5f\x30\x63\xf1\x97\xd3\x77\xfd\xe7\x09\x87\xa5\x54\x96\x21\xf1\x20\x52\x66\x1a\x36\x16\x35\x9d\x4c\xaf\xe3\x33\x3a\x89\x2e\xae\xaf\xaf\x31\x8a\x92\xb3\x84\x26\xe7\x51\x1c\x62\x88\xe7\xd1\x79\x92\x5c\xc4\x21\x40\x32\xf1\x79\xcb\xe1\xf9\xa3\x6e\xf9\xf3\xe2\x98\x38\x0e\x27\x69\xc9\xb1\x2a\xc9\x0f\x0f\xa4\xe0\x60\x12\xa9\x72\xeb\x46\xea\x67\x9f\xa7\x52\x71\x8b\xc8\x8c\x29\xf4\x6c\x3c\x4e\x40\x1b\xca\x47\xcd\x9d\x8d\xa4\x4a\xc7\x9c\x89\xf2\x79\xdb\x02\xd5\xbf\xe1\xf3\xd5\xe5\xe2\x72\x3a\x84\x1c\x5e\xa4\x18\x9e\x8f\x26\xa3\xbf\x46\x26\x7d\xf1\x05\x59\x31\x31\x09\xc3\xab\x82\x97\x96\x72\x02\x5c\xa3\x1f\xf9\xf5\xe6\x1e\x29\xd3\xe6\x96\xf3\x43\x25\x68\x21\x3f\x6e\x9b\xd9\x5b\x8d\x16\xfa\x8b\x3a\xd6\x6f\xfb\x22\x3a\xe0\x8d\x63\x69\xc5\x25\x02\xf2\x4a\x3e\xaf\xaf\xcb\xda\xc1\x66\xd3\x74\x7b\x83\x22\x11\xc4\x4f\x65\xe1\xe9\xf6\x4c\x6a\xb3\x73\x21\x24\x45\x3d\xfa\x16\xfe\xd8\x6c\xda\x7a\xe3\x32\xfd\x04\x26\xdb\xa9\x54\xa6\x1e\x95\x8e\xeb\x60\x43\x48\x51\x98\x11\x97\xe9\x9e\x9b\x7b\x69\xc0\xa0\x33\x08\xaa\x23\xcd\x5e\xf0\x73\xa6\x50\x67\x92\xd3\xbb\xf7\x64\x16\x9c\x85\x61\xe8\x16\x8d\x18\x96\xef\x40\x1f\x94\x4d\x65\x32\x1d\xb8\x25\xb2\x59\x6f\x55\xce\x8c\x54\x4c\xa4\xff\x51\xea\xbb\x80\x6f\x9b\x7e\x05\x2e\x94\x8c\x51\x6b\xdc\x4f\x1a\x54\xaa\x27\x8b\xcb\x2e\x05\x81\xa6\x63\xac\x3d\x49\x65\x4f\x26\x57\x61\x18\x3a\xa7\x9b\x3d\x7e\xda\x48\x05\x69\x37\xbb\xea\x90\x46\x4e\x19\x97\x31\x14\x63\xfb\x01\x6e\xab\x49\xc1\x00\x39\x1c\x60\xad\x0d\xe6\x7f\xcb\xd4\x13\x02\xb5\x61\xa2\x9e\xf7\xb3\x80\x24\x8c\x63\x8f\xec\x48\xd1\xe5\xb1\xd6\xad\x7b\x5d\xd8\x4e\xf8\xc9\xaa\xba\x43\x97\xd4\xa0\x87\xde\xd1\xbd\x74\xca\x06\xe8\x1d\x0a\x1e\x2a\x4d\x7b\x7c\x5e\x17\x15\xae\xce\xb6\x0d\x58\xee\xa6\x51\x7b\xb2\xb4\x10\x50\x9a\xec\x21\xce\x30\x87\xdd\xe4\xba\x70\x9b\x50\x61\xc1\x59\x0c\x0f\x68\xda\xe3\x92\x28\xe9\xbe\x26\x44\x67\xa0\x28\x13\x69\x63\x1b\x6c\xfd\xbb\x1b\x83\xd5\xda\x17\x8d\xd5\x4b\xea\x5f\x0e\xac\xf5\xd3\x8a\xd6\xcc\x83\x02\xb4\x5e\x49\x45\x03\x97\x3c\xc5\x82\xcb\x75\x8e\xc2\xcc\x4b\x93\xdd\x61\x9c\x81\x60\x3a\xef\x3e\xfb\xe4\xe1\xe6\x7e\x7e\x37\x7c\xf8\x30\x1f\x9e\xed\x1a\xa1\x3d\x80\x9f\x70\xdd\xc4\x7a\xc2\xf5\x5e\x98\x27\x5c\x57\x6d\xe8\xb4\xdb\x3f\x32\xd2\x4e\xaf\xc5\x52\x24\xac\x69\xbf\x85\xcc\x47\xd6\x63\x9b\x2b\xd3\x10\x71\xa4\xdd\xc7\x8c\x94\x1a\x95\xbe\x45\x8e\xa6\x3a\x6e\x3f\x48\xf5\xd9\x23\x88\xe6\xc8\xc9\xaa\x57\xa0\x96\x25\xd0\x9c\x89\x3e\xd5\x6c\xef\xac\xf7\x1d\xeb\x5f\x8c\x8e\xf0\xeb\xf8\xb7\xc0\x98\x97\xda\xa0\xba\xab\x67\x69\xf7\x21\x0c\x3a\x8f\x61\xe0\xde\xc7\xd6\x63\xd9\xea\x94\xfd\xd1\xdc\x97\x21\x13\xcc\xf4\xf7\xcd\xa1\xa1\xf4\xbf\xaf\xe4\xbc\xc2\xf7\xd7\xb1\xdf\xcb\x9f\xa3\xa0\x10\xe8\x5c\xac\x6f\xc1\x40\x64\xb7\xfc\xb7\x61\x61\x1b\xa1\xaa\xc2\xc9\xa8\x70\x19\x03\x3f\xb6\x20\x8f\x8a\x99\xb7\x2a\xc5\xaf\xe2\xff\xb6\xb0\xda\xeb\xde\x09\x45\xe5\xe4\x19\x74\xe2\x6c\x29\x79\x01\x07\x44\xe7\xa9\xee\x31\xa5\x3d\x56\x6b\x7d\xf7\xfa\x27\xc2\xfe\x5a\x5f\xa7\x8a\x7c\xa4\xa6\x7e\x3f\xfc\x41\x29\x1d\xd5\xc7\xa7\x2c\xb6\x37\xe6\xbe\xa9\xab\x9b\x3d\x29\x54\x31\x17\x7e\x41\xf4\xae\x1a\x76\xb5\x71\xf6\x15\xeb\xac\xb3\xa0\x6c\x06\x9b\xc1\xbf\x01\x00\x00\xff\xff\xc5\x02\x76\x8f\x79\x11\x00\x00")

func standaloneJsonBytes() ([]byte, error) {
	return bindataRead(
		_standaloneJson,
		"standalone.json",
	)
}

func standaloneJson() (*asset, error) {
	bytes, err := standaloneJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "standalone.json", size: 4473, mode: os.FileMode(420), modTime: time.Unix(1497360978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sharded_set.json": sharded_setJson,
	"single_replica_set.json": single_replica_setJson,
	"standalone.json": standaloneJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sharded_set.json": &bintree{sharded_setJson, map[string]*bintree{}},
	"single_replica_set.json": &bintree{single_replica_setJson, map[string]*bintree{}},
	"standalone.json": &bintree{standaloneJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

