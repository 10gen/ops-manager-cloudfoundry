// Code generated by go-bindata.
// sources:
// om_cluster_docs/3_2_cluster.json
// om_cluster_docs/replica_set.json
// om_cluster_docs/sharded_set.json
// om_cluster_docs/standalone.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _om_cluster_docs3_2_clusterJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x98\x5b\x6f\x9b\x30\x14\xc7\xdf\xf3\x29\x10\xcf\x69\x08\xb4\x49\xb7\xbc\xb5\x59\xa5\x4c\x5a\xd2\xa9\x89\xba\x87\x36\x42\x06\x5c\xb0\x06\x18\xd9\x4e\xa6\x6c\xca\x77\x9f\xcd\xdd\x04\xd8\x45\xcb\x40\x2d\x6f\x70\xce\xf9\xfb\x5c\x7e\x38\x38\x3f\x06\x0a\xbf\x70\xc4\x10\x0e\xe9\x4c\x49\x6e\xc5\xe5\xe0\x6f\xa1\x8f\x81\x73\x0b\x28\x9c\x29\xaa\xb6\x07\x44\xf3\x91\xa5\x05\x38\x74\xb1\x63\x5d\x04\x01\xbd\x00\x3b\x86\x03\x20\x42\xd5\x61\x6d\xe0\x17\x14\xf2\x5b\xae\xab\xce\x67\xcf\xcf\x0d\xa1\x71\xe4\x31\x11\x88\x5d\x3e\x58\x8f\x90\xd0\x24\xa1\xa7\x22\xa3\x10\x04\x22\x93\xcb\xd1\x78\x34\xcd\x82\x94\x1a\xb3\x3e\xba\x4e\xcd\xdb\x44\xd4\x02\xf6\xd7\x5d\x54\xab\xe9\x61\xca\xd2\xc0\xe5\xcd\x7c\xf1\x71\x75\x67\x2e\xee\xd7\x9b\xd5\xcd\xf2\xae\x54\x92\x8f\xdd\xcf\x80\x79\x79\x1b\xb0\xdb\xd0\x06\x2d\x59\xea\x02\xb8\x30\x64\x23\xee\x27\x8b\x3c\x60\x06\x18\x2c\x77\x59\x5c\x14\x7d\x87\x1b\x8f\x40\xea\x61\xdf\x59\xde\xce\x14\x7d\x3c\x1e\x0f\x25\x17\x86\x82\xc2\x65\x41\x78\x0d\xc6\x55\xee\x70\x94\x8a\xe5\x89\x21\x86\x09\x0a\xdd\xff\x52\x70\xb1\x5c\x97\x45\x47\x04\xdb\x90\x52\x28\xd7\x0a\x88\x4b\x0d\x73\x5a\x5d\x3a\x84\xac\xfa\x28\xd6\xc0\x84\x3f\x37\xde\xf1\x3c\x24\xdb\x51\xce\x8a\xc0\xc8\x47\x76\x5c\x7c\x9d\x8a\x30\xaf\x21\x5b\x25\x2d\xb6\xfc\x1d\x54\xdb\xd4\x28\xef\x1d\xef\x5b\x9d\x92\x63\x65\x23\x60\x41\xa4\x39\x80\x01\x4d\xc8\x99\xe3\x76\xc1\x03\x65\x30\xf8\x84\xdd\x5a\x49\x48\x19\x0a\xd3\xdc\xd5\x17\xe4\x43\x75\x78\xda\x87\xfa\x55\x33\x00\xe2\x01\xcb\x19\x0c\x6a\x72\xf9\x6d\xce\xce\x84\xc7\xb0\xba\x2f\xa4\xbd\x2b\x9e\xa7\xcc\x6c\x0e\x91\x30\x27\xd5\x95\xcc\xfb\xe4\xed\xc9\x77\x94\xc2\xc2\xe9\xf7\xd6\xb6\x07\x03\xf0\x98\xf9\x5c\x9e\x6e\x47\x7f\x0b\x9f\xde\x6b\xf8\xf4\x4e\xe0\xd3\x5f\x05\x7c\x7a\xff\xe1\x33\x7a\x0d\x9f\xd1\x09\x7c\xc6\xab\x80\xcf\xe8\x3d\x7c\xfa\x75\x17\xd3\x8d\xab\xa7\xe6\xe5\x1f\x0e\xd9\xf6\x77\x3c\x1f\x92\x76\x77\x9e\xdc\xa9\x7d\x87\x20\x2b\xb6\x9d\x05\xda\x03\x16\xde\xb7\xb2\xe0\x01\xe2\xf0\x2f\xce\x3a\x89\x74\x30\x0f\xd8\x17\xf5\xd8\x38\x7c\x41\x2e\xdd\x93\x7f\xbd\x15\x25\xc2\xe6\x55\x27\x3b\x52\xb6\xf8\x59\x36\x26\xe0\x23\x40\xfb\x85\x6d\xde\xec\xbe\x6f\x61\x46\xeb\xc9\xa1\x3f\xd8\x4e\xba\xc4\x76\xf2\xc6\xb0\x9d\xf4\x1f\xdb\xd6\x33\x47\x7f\xb0\x9d\x76\x89\xed\xf4\x8d\x61\x3b\x3d\x2f\xb6\xe9\x1f\x37\xe9\x99\x82\x9f\x1b\xe4\xbf\x6e\x4c\xe4\x64\x87\x88\x42\x2d\x80\x81\x05\x89\xec\x98\x3b\x57\x2a\x17\xed\x2f\x4e\xfd\xa5\x9a\x95\x9a\x58\xbd\x39\x56\xff\x55\xac\x21\xc7\x02\x62\x21\xfe\x46\xdc\x87\xfe\x61\xa6\x30\xb2\x83\xcd\xd2\x46\x05\xc1\x88\x20\x4c\x10\xe3\x71\xc5\xcf\xc8\x71\x2b\xb5\xab\x78\x17\x4b\x2d\x48\x06\xb6\x86\x64\x2f\x3e\x48\x9f\x24\xcd\xc6\x1f\xd0\x13\xe3\xa4\xcd\x58\x7a\xf3\xb6\xb5\xd4\x9c\x7e\x01\xc7\xa9\x36\xcc\xaa\x3a\x58\x71\x89\xb9\x56\x4e\x8d\x79\xf1\x83\xe3\xe0\x67\x00\x00\x00\xff\xff\xb5\x47\x39\xde\xa8\x16\x00\x00")

func om_cluster_docs3_2_clusterJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docs3_2_clusterJson,
		"om_cluster_docs/3_2_cluster.json",
	)
}

func om_cluster_docs3_2_clusterJson() (*asset, error) {
	bytes, err := om_cluster_docs3_2_clusterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/3_2_cluster.json", size: 5800, mode: os.FileMode(420), modTime: time.Unix(1463071475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsReplica_setJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xcf\x73\x9b\x38\x14\xbe\xfb\xaf\xf0\x70\xae\x6d\x4c\x7e\x6c\x92\x9b\x9b\x1c\x7a\xd8\x6c\x3a\x49\xdb\x1c\xb6\x1d\x8f\x40\x02\xb4\x15\x12\x23\x89\x24\x4e\x86\xff\x7d\x25\x81\x6d\x01\xc2\x21\x33\x75\x93\xce\x84\x93\xfd\xf4\xf4\xbd\xa7\x4f\xdf\x13\x7a\x3c\x8d\xc6\xea\xf1\x58\x2e\x31\xa3\xc2\x3b\x1b\x57\x06\x63\x84\xec\x9e\x12\x06\xe0\x47\x20\x90\x1a\xf1\x66\x77\x80\xcf\x08\x0e\x67\x19\xa3\x09\x83\xe1\x24\xcb\xc4\x04\x14\x92\x65\x40\xcf\xf6\x3e\xb8\xa7\xde\x62\xaa\xfe\x6a\x6c\xef\xfc\xec\xfb\xf7\x9e\xc9\x66\x6e\x59\x41\x78\xc6\xe7\x22\xfc\x86\xb8\xa8\xd3\xfa\xd7\xca\x2b\x2c\x30\x81\xc6\xb8\xb1\xad\x9f\xa7\x8e\xa5\x9a\x81\xa5\xf6\x3f\x3e\xfc\xe0\x1e\x8f\x09\xb8\x63\x5c\x67\xe8\xf5\x78\x24\x58\xd6\xd9\x68\xaf\xc3\xe0\xf0\x34\x9a\xc3\x20\x3c\x3a\x3d\x3d\x45\x61\x18\xcf\x63\x18\x1f\x84\x91\x8f\x7c\x74\x10\x1e\xc4\xf1\x51\xe4\x03\x10\x07\x7d\x68\x19\x78\xb8\x12\x16\x5e\xaf\x1f\xa6\xc3\xfc\x18\x2c\x08\x32\x94\xfc\xe8\x71\xc9\x09\x90\x31\xe3\x99\x86\x61\xe2\xa1\x0f\xa9\xe0\x44\x7b\xa4\x52\xe6\xe2\x6c\x36\x8b\x81\x90\x90\x4c\xeb\x3d\x9b\x32\x9e\x28\x01\xd0\xe2\x61\x23\x01\xf3\x6f\xf2\x70\x72\xbc\x3c\x3e\x9c\x80\x0c\x3c\x32\x3a\x39\x98\x06\xd3\xbf\xa6\x32\x79\xec\x0b\x72\x8f\x69\xe0\xfb\x27\x39\x29\x74\xca\x31\x20\x02\xf5\x7b\x7e\x3b\xbf\x46\x10\x0b\x79\x41\xc8\x2e\x0a\x2c\xcf\xab\x8d\x98\x7b\xd9\xb0\xbc\xbf\xf2\xa1\xb8\xf6\x46\x74\x9c\xcb\x86\xc5\x8a\xeb\x51\x90\x99\xf2\x31\xb4\xd4\x3a\xaf\xc7\xbd\x10\x44\x3f\x8b\xbc\x47\xe7\x29\x13\x72\x3d\xb9\xe2\x7b\x42\x19\x44\x13\xdf\xae\x34\xc2\x92\xcf\x40\xa6\xdb\xfa\x64\x49\x4f\x7d\xce\xaa\x60\x13\x90\x20\x2a\xa7\xca\xaf\x05\x73\xcd\x24\x90\xa8\x71\x04\x98\x21\x81\x1f\xd1\x97\x94\x23\x91\x32\x02\x2f\x3f\x2a\x87\xb9\xef\xfb\x4d\xba\x3c\x89\xb3\xad\xd3\x27\xae\x97\x12\x1c\x8e\x9a\xe4\xe8\x55\x6f\xea\x1b\x4b\xc6\x31\x4d\x7e\xd3\xd2\xb7\x01\x5f\x77\xf9\xc6\x39\xe7\x2c\x42\x42\xa0\xf6\xa2\x01\x4f\x44\xb0\x3c\xee\xa6\x40\x91\xec\x18\x2b\x24\xc6\xf5\x48\x70\xa2\x32\x6a\x8c\x96\xad\xfc\x38\xca\x09\x8e\xaa\x93\xd6\x89\xa4\x1d\x6e\x90\xfc\xa7\xe6\x3c\x8f\xe2\xa5\x36\x79\x3b\x51\x85\xa2\x54\xd1\xe9\x46\x84\x61\x63\x73\xee\x22\x90\xcf\xf4\x04\xb4\xd9\x23\x08\x24\x78\x26\xc0\x4a\x48\x94\xfd\xad\xf6\xca\x1d\x02\x09\x89\xe9\x7a\x55\x5e\x8c\x09\x72\x94\xb1\x97\x77\xf3\x58\x09\x4b\x2d\x4b\x2d\xad\x75\x56\x46\x19\xcd\xa4\x46\x8e\xf4\x06\x2b\x74\x9f\xb2\x72\x1c\x32\xbd\xa9\xd4\xa2\xfb\xb2\xca\x2d\x3f\xdb\xe1\x6e\x7b\xba\x55\x27\x95\x35\xa6\x2a\x29\xbd\x89\x52\x94\x81\xed\x19\x78\x54\xbf\xb1\xc7\xef\x0a\xde\x15\xe0\xcf\x53\xf0\xfc\xed\x28\x78\xfe\xae\xe0\x77\x05\x9b\xa4\x5e\xa4\xe0\xe0\xed\x28\x38\xf8\x1d\x0a\x5e\x5f\x2c\x6a\x85\x29\x0d\xb5\xaf\x16\x4b\x0c\x1b\x92\xb2\x70\x33\x94\x85\x88\xb7\x26\x58\x93\xda\x7c\x68\xd2\xbb\x6f\x1a\x8b\x90\x36\xcb\x15\xcc\x7c\x00\xcc\xfc\x79\x98\xa0\x05\x03\xb8\xea\xed\x10\xbf\xa2\x64\xa5\x46\x25\x2f\xd0\x80\x38\xed\xbe\x4c\x6d\x0c\x56\x97\x43\xa9\x21\xb6\x35\x5c\xfe\x68\xb1\xcb\x9a\x2d\x96\x27\x52\xc0\xa1\xba\x52\xd6\xb6\xd1\x66\x9b\x9a\x6d\xb4\xbe\x86\x7e\x15\xc8\xb4\x97\xfd\x1d\xb3\xb6\x7e\xbe\x37\xbb\xf4\xf4\x34\xce\x81\x10\xf7\x8c\xc3\x71\x59\x36\xda\x6a\xb5\x77\x6c\x95\xa9\x0b\xec\x42\x85\xb9\x44\x51\x0a\x28\x16\x59\xb7\x17\xf6\x6e\xce\xaf\x17\x97\x93\x9b\x4f\x0b\x9b\x54\xbb\x2b\xf9\x89\x56\x75\x2c\xf5\xab\x15\x46\x59\x4c\x1d\x37\xea\xf5\x3f\x16\x8a\x46\xb1\x46\x8c\xc6\xb8\xae\xdf\x25\xcb\xa6\x1a\xd1\xce\x15\x0b\x10\x12\x04\xbb\x1d\x9e\x57\x28\x36\xc4\x05\x22\x48\x9a\x61\xbb\x4b\xab\xc6\x6e\x01\xad\x87\x1a\xab\x72\x9e\x70\x3a\x4b\x00\x55\xa7\xec\x3a\x76\x36\x7b\xe6\x6c\xee\xdc\x5f\x0b\x06\xe0\x36\xf0\xb5\x63\xa4\x5a\x59\x25\xc3\xcb\xaa\xcd\xe8\x76\x87\xfa\x29\x3b\x56\x47\x77\x6a\xd6\xbf\x56\x4a\xbb\x6b\x71\xad\x10\x2b\x17\xb7\x6e\x76\x9d\xea\x6f\x9e\xc9\x85\xf1\x77\xf3\xe8\x46\xf9\x75\x29\x70\x04\xe0\x82\xae\x2e\xd4\xab\x31\xd4\x9f\xbe\x5e\x27\x0b\x2d\x04\xc3\xc2\xde\x52\x21\x2c\x02\x64\x28\x21\xb7\xea\x7c\x7c\x2d\x2a\x9e\x8b\xff\xe2\xc2\xb2\xbf\x84\xec\xb1\xa8\x1a\xeb\x1c\x77\xe2\x6c\x52\xea\x75\xd8\x51\x74\x3d\xec\x0e\xa1\x76\x68\xad\xb9\xf6\xf5\x57\x84\x7d\xbe\xbe\xf6\x15\x79\x60\x4d\xbd\x3c\xfc\xce\x52\x1a\xa4\xe3\x7d\x92\xdd\x1b\xb3\x6d\xea\xd6\x4d\xab\x14\x4c\xcc\x65\x7f\x41\x38\xaf\x1a\xfa\x6a\xd3\xb8\xaf\x68\xb0\xce\x05\xa5\x1c\x95\xa3\xff\x03\x00\x00\xff\xff\x9a\x14\x4c\xfc\x8e\x18\x00\x00")

func om_cluster_docsReplica_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsReplica_setJson,
		"om_cluster_docs/replica_set.json",
	)
}

func om_cluster_docsReplica_setJson() (*asset, error) {
	bytes, err := om_cluster_docsReplica_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/replica_set.json", size: 6286, mode: os.FileMode(420), modTime: time.Unix(1468510628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsSharded_setJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9c\x4d\x73\xda\xbc\x16\xc7\xf7\x77\xe6\x7e\x07\xc6\xeb\xf2\x62\x20\xaf\xbb\xb4\x59\x74\x71\x73\xdb\x49\xfa\xb2\x78\xda\x61\x64\x5b\x18\x3d\xb5\x2d\x8f\x24\x48\x68\x26\xdf\xfd\x91\x64\x63\x0b\x90\x4c\xe8\x93\x12\x89\x3a\xd3\x45\x31\x7f\x49\x47\x47\xe7\xfc\xb0\x8f\x65\x3f\xfe\xf7\x3f\x9d\x4e\xc7\xc3\x39\x43\x38\xa3\xde\x65\xa7\x38\x20\xff\xbc\x08\xdf\x67\x09\x06\xd1\x5b\x40\x21\xff\xca\xeb\x2f\x00\xe9\x27\x28\xe8\xa7\x38\x8b\x71\x14\x74\xd3\x94\x76\xc1\x9c\xe1\x14\x88\xe6\xde\x1b\x43\xdb\xaf\x28\xe3\x1f\x45\xef\xde\xbb\xcb\x6f\xdf\x0c\xad\x8b\xc6\x4f\x65\x27\x9e\x54\x5d\x07\x5f\x20\xa1\xa5\x69\x7f\xa9\xb6\x05\x73\x94\x44\xf2\x68\x7d\x70\xf5\xf7\xb8\x7d\xa8\x68\x83\x98\x68\x71\x3a\x7e\x63\x10\x4c\x13\xb0\xc0\x44\xd8\xe9\x99\x24\x31\x62\xa5\x49\x42\x36\x1e\x8e\x2f\x42\x3f\x1a\x06\x27\x17\x17\x17\x30\x08\xa6\xfe\x34\x9a\x8e\x82\x70\x00\x07\x70\x14\x8c\xa6\xd3\x93\x70\x00\xc0\x74\x68\xec\x2e\x05\x0f\x1f\xa8\xd2\xa1\x59\x88\xb2\x67\x0a\x71\x34\x4f\xa0\xf4\xcc\x77\x93\x26\x4f\x00\x9b\x62\x92\x8a\x8e\x30\x7d\x30\xf6\x35\x27\x89\x90\xcc\x18\xcb\xe9\x65\xbf\x3f\x05\x94\x45\x49\xaf\x5c\xbf\x1e\x26\x31\x8f\x86\x6c\xfe\x50\xc5\x83\xfc\xd4\x7d\x38\x3f\x9d\x9c\x8e\xbb\x20\x05\x3f\x71\xd6\x1d\xf5\x86\xbd\xb3\x1e\x8b\x7f\x1a\x47\xb9\x47\xd9\x70\x30\x38\xcf\x93\xb9\xb0\x7a\x0a\x12\x0a\x1b\xa4\x5f\xde\xdd\xc2\x08\x51\x76\x9d\x24\x8d\x7e\x50\xa4\x1f\xaa\xe8\x36\xbb\x44\x91\x7f\x26\xcf\xee\x59\x5d\x90\x6d\xf5\xd3\xfa\x21\x75\x6c\x2f\x03\xa9\xcc\x29\xe9\x9e\x55\xec\xaf\x14\x5e\x00\xc2\x1f\xf3\x5c\x8d\xfd\xe2\x0b\x21\xa8\xf3\x03\x31\x4c\x50\x16\x6f\xcb\xd4\x44\x99\x61\xca\x56\x83\xd1\x19\x20\x11\x8c\xba\x21\x77\x35\x83\x64\x22\x3f\x4f\xfc\x89\x3f\x58\xcb\xdd\x04\xc7\x1f\x01\x9b\xd5\x29\x8f\x63\x43\xca\xf7\x6b\x2b\xba\x20\x86\x19\xeb\x71\xed\x66\x5f\xb7\x98\x01\x06\xd7\xd9\x22\xbf\xa3\xe8\x27\xfc\x34\x23\x90\xce\x70\x12\xdd\xbc\xe5\x0a\x7f\x30\x18\x6c\xb8\xdd\x63\x28\xad\x55\xef\x89\x98\xe6\x70\x5c\x6b\x4a\x27\x3f\xd5\x0e\x92\xad\x72\x82\x43\x48\x29\x34\x20\x62\xc3\x4b\xd5\x60\x80\xc4\x74\x38\x39\xdd\x36\xb6\x5e\x38\xc8\xcc\xdf\x16\x43\x63\x22\x24\xc3\x33\x3e\x19\xbd\xec\xc9\x14\x5a\x38\x87\x44\x3a\xf6\x23\xc1\x53\xc4\xd3\x29\x16\x63\x19\xe5\x04\xe6\x09\x0a\x0b\x7c\x36\xdb\x24\x94\x77\x90\xfd\x5f\x0d\x84\xc9\x40\x13\xb3\x8d\xe6\x51\xbe\xd4\x7c\x99\x77\x8c\x15\x05\x6b\xd1\xb3\x08\x41\xde\x17\x2d\x61\x5f\x1f\x7f\x03\xee\xef\x7d\x0d\x59\xf2\xf6\xe9\xff\x70\xbc\xcb\x14\x48\x19\xca\x56\x0e\xf2\xb8\x4b\xa1\x29\xad\xa5\x3e\xdf\x36\x7c\x49\x65\xfc\x1b\x4d\x5f\x65\x86\x8c\x7c\xc3\x34\x34\x68\xd0\x58\xe1\xf1\xbc\x9a\xdd\x85\x33\x98\x82\x9a\x2b\x27\x3a\xa1\x9a\xd3\xc5\xf0\xdd\x0c\x47\xb0\xeb\x8f\x75\xb3\x6b\xca\xc1\x4a\xf3\xac\x5c\xac\xd4\x3b\x72\xb2\x71\x96\xcd\x30\x12\xc1\xa0\x6b\x55\xe6\xf3\xa7\x65\xae\xcc\x5a\xab\x5c\xd4\x4c\x56\xe1\x6a\xb2\xa9\xa5\x80\x2d\x14\xd8\x5c\xa9\xdd\x86\x58\x43\x81\x33\x9b\x28\xa0\x3d\xdb\x74\x0c\x02\x67\x2d\x04\xfe\x4c\x08\x9c\xbb\x0b\x81\x73\x9b\x20\x30\x3a\x02\x08\x9c\xb7\x10\x38\x28\x04\x7c\x3b\x20\xe0\x4f\x2e\x5c\x85\x00\x37\xdd\x26\x08\xb8\x7f\x39\x20\x62\xa1\x85\xc0\x1f\x09\x01\x7f\xff\x73\x12\x6b\x28\xe0\x0f\x6c\xc2\xc0\xc9\x11\x60\x60\xbd\x44\x59\x35\x6b\x39\x70\xfc\x1c\xd8\xdf\x12\x7b\x38\xe0\xdb\xc4\x01\x7d\x65\xcd\x31\x0e\xf8\x2d\x07\x0e\xca\x81\xa1\x1d\x1c\x18\x4e\xfc\xfd\x2d\xb1\x84\x03\xc2\x76\x9b\x38\xa0\x2f\xae\xb9\xc4\x01\x19\x0d\x2d\x07\xfe\x4c\x0e\x8c\x1c\xe6\xc0\xc8\x26\x0e\xe8\xeb\x6b\x8e\x71\x40\x5f\xe8\x6c\x39\x70\xfc\x1c\x18\x3b\xcc\x81\xb1\x4d\x1c\xd0\x97\xd8\x1c\xe3\x80\xbe\xd6\xe9\x30\x07\xfc\x0b\x4b\x39\x10\xe2\x6c\x8a\xe2\x5b\xba\x77\xfa\x89\xa5\x2a\xad\x6a\x18\xad\x5c\xd9\x5b\x9c\x28\xa3\xd1\x05\x39\x34\x77\x56\xd3\xfc\x85\x7b\xa3\x07\xe7\x4c\x6d\xab\x4d\x5c\xd1\x97\xec\xec\xe4\x8a\xb2\xda\x2d\x47\x5a\x8e\xa8\xc3\xbd\x14\x47\x1c\xa8\x63\xd6\xb6\xda\xc4\x11\x7d\xc9\xcf\x72\x8e\x1c\x5d\x9d\xb2\xe5\x88\x25\x1c\x71\xa0\x0e\x5a\xdb\x6a\x15\x47\x9c\x3c\x21\x39\xba\x42\xa7\x7f\xf6\x7b\x41\x72\xc0\x70\xd7\x16\x28\xe4\x5a\xd0\xc9\xab\x94\xfa\x4a\x1b\x34\x57\xca\xda\xd8\x30\x66\x8a\x4b\x3f\xb9\x26\xff\x3f\x3b\x6f\x68\x9b\x37\x1d\x2b\xca\x63\xe5\xca\xbd\x4a\x71\xec\xa5\x32\xc7\xe5\xdd\xf7\x2b\xff\xb7\x99\xe3\x68\xe6\x9c\xb8\x9c\x39\x2e\x6f\x59\x5f\xf9\xff\x37\x67\xce\xea\xe9\xdf\xea\x31\xd7\xf2\xa2\x89\x5f\x0d\x95\x0f\xba\xea\x92\x69\x82\x22\x4f\x79\xd2\x43\x37\x70\x0a\xd3\x00\x92\xfd\x1e\x96\xdd\xe8\xdf\xe4\x6f\x29\x01\x24\x40\xdc\x4f\x1f\xb2\x64\xe9\x35\x3f\xe3\x2d\xe5\x33\x14\x45\x30\x7b\x96\x92\x47\x93\xf9\xbe\x80\xe1\x69\xc2\xaa\x75\x4e\x10\x26\x88\x09\x9b\xfc\x26\x1d\x4d\xc0\x02\x5e\xc3\x04\x2c\x77\x4d\x74\x81\x99\x7c\xe6\xd8\xdf\x8f\x38\xbb\xdd\xdb\x68\xdf\xab\xb9\x57\xbb\x95\xa4\x6a\xed\x90\x7b\x87\x56\xba\x57\x7b\x87\xbe\x6a\x7d\x78\xf7\x6e\x1f\xfe\xbe\xff\x6f\xfb\x1a\x8e\xf4\x17\x1a\x47\x8a\x23\xc3\xd3\x0c\x55\x6b\x87\xf2\xc5\x46\x1c\x99\x76\x89\x57\xcd\x1d\xf2\xaf\x8d\x3c\x32\xed\xbe\xad\x9a\x1f\x03\x90\xf4\xd7\x6f\x47\x0a\x24\xd3\x3e\xca\xaa\xb9\x43\x19\x63\x23\x91\x4c\xfb\xd3\xaa\xe6\x0e\xf9\xd7\x46\x22\x99\xf6\xfd\x54\xcd\xdd\x26\x52\x75\x67\xeb\x28\x91\xd4\xbc\xe5\xa2\x92\x3b\x94\x22\xaf\x8b\xa0\xe6\x5b\xcf\x95\xdc\x21\x7f\xbe\x2e\x72\x9a\xef\xc0\x55\x72\x1b\x11\x53\x7c\xac\xaa\x44\xca\x9d\x6e\x85\x15\x3a\xf0\x48\xe5\x2f\x32\x85\x81\xb8\xf1\x1d\x7b\x52\xb4\xbb\x16\x55\x49\x25\xdb\x7e\xf1\xfd\x24\x2f\x6b\x67\x73\x42\xa9\x76\xee\xbb\xc7\xe7\x65\xed\x6c\x0e\x54\xd5\x4e\xe3\x1e\x02\x4d\x6c\xed\x51\x07\xd5\xfe\x50\x15\x79\x74\x07\xc9\x42\x16\x89\xb5\xf3\x59\x13\xdd\x16\x45\xcd\x9d\xbf\x80\x21\x4e\x12\x18\xd6\xef\x76\x34\x26\x41\x99\x06\xa2\xa2\xed\x5d\xd6\x2e\xf7\x22\x44\x41\x90\x40\xee\xc1\x0d\x28\x08\x29\xfe\x78\x2f\x5d\xfb\xf8\xd8\xc9\x01\xa5\xf7\x98\x44\x9d\xa7\x27\x6f\x43\xf4\x99\x8a\x49\x79\xc6\x37\xa1\x7a\x11\x9f\x0c\x5e\xa6\x30\x63\x57\x7c\xf8\x1b\x18\xce\x40\x86\x68\xba\x9d\x63\xde\xdd\xbb\xdb\xab\x9b\xee\xdd\xfb\xab\xae\x12\x45\x8a\xb3\xbc\x1f\x90\xa3\x43\xd8\xc3\xff\xb3\x61\x0a\x3f\x22\xef\x26\x5c\x2a\xf7\x0a\xfe\xc6\x01\x2d\xef\x07\x4c\x44\x85\xbd\xdc\x95\x51\x1c\x9a\xe0\xb4\x27\xfa\x53\xfa\x98\xf3\xa9\xd0\xaf\x20\x63\xc2\x21\x6b\xb6\x6d\x46\xa9\x17\x05\x7c\x24\x10\xa5\x28\xdb\x5a\x18\x0f\x65\x88\x49\xd7\x99\x3d\x57\x2a\x09\x96\x2f\x2a\xd5\xa0\x46\x9f\x16\x4d\xc3\x2a\x5d\x72\x4d\x19\x8e\x37\xc5\xdb\x29\x77\xbf\x9a\x73\x3b\xc8\xa5\x37\xca\x85\xdd\x7c\xc9\xe5\x5a\x7f\xeb\x99\xed\xaa\xa7\xae\xa4\x54\xe3\x27\x4d\xeb\x7f\x3b\x24\x81\x20\xba\xca\x96\xd7\x80\x81\x40\xbc\x59\xf8\x30\xa3\x8a\xf5\x94\xb3\x7c\xd9\xa1\x13\x1c\x82\xe4\x19\x13\xfe\xca\x4f\x11\x0e\x35\xd5\xc6\xf1\xf6\x09\xfc\xe2\x35\xb4\xba\xa0\xd7\xf2\x49\x02\x84\x9f\xe1\xc0\x82\x20\xdf\x37\x50\xb9\xc6\x3f\x41\xd6\x6d\xe0\xf1\x7e\xf9\xbf\x7f\x02\x00\x00\xff\xff\x99\x0f\x17\xa0\x95\x5a\x00\x00")

func om_cluster_docsSharded_setJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsSharded_setJson,
		"om_cluster_docs/sharded_set.json",
	)
}

func om_cluster_docsSharded_setJson() (*asset, error) {
	bytes, err := om_cluster_docsSharded_setJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/sharded_set.json", size: 23189, mode: os.FileMode(420), modTime: time.Unix(1468510614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _om_cluster_docsStandaloneJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x0c\x9d\x2b\x5b\x71\xdc\x6c\x92\x9b\x9b\x1c\x7a\xd8\xa0\x45\xd2\x36\x87\xed\xc2\x18\x89\x94\xc4\x2d\x45\x0a\x24\x9d\xc4\x09\xfc\xee\x4b\x52\x8a\x2d\x5a\xa4\xab\x02\xf5\x66\x75\xb2\x67\x3e\xce\x1f\xe7\x1b\xce\xcb\x68\xac\xbf\x88\xd7\x8a\x70\x26\xa3\xcb\x71\x23\xb0\x42\xc4\x1f\x19\xe5\x80\x3e\x80\xc4\x5a\x13\x4d\x1f\x40\x4c\x29\x49\xa7\x15\x67\x05\x47\x69\x5c\x55\x32\x86\x95\xe2\x15\x98\xd3\xd1\x3b\xff\xd1\x7b\xc2\xf4\x5f\x63\x3b\xba\xba\xfc\xfe\x3d\x70\xd8\x9e\xdd\x34\x26\x22\x8b\xb9\x4e\xbf\x61\x21\xdb\xb0\xfe\xea\xc4\x95\xae\x08\x45\x56\xb8\x95\xbd\x7e\x2f\x3d\x49\x73\x82\x28\x83\x3f\x9b\xbf\xf3\xeb\x73\x0a\x0f\x5c\x98\x08\xa3\x00\xa2\x20\xaa\x8d\xc6\xa0\xe6\xb3\xf9\x45\x76\x82\x66\xe9\xfb\x8b\x8b\x0b\x9c\xa6\xf9\x49\x8e\xf2\xd3\x34\x4b\x70\x82\x4f\xd3\xd3\x3c\x7f\x9f\x25\x00\xf9\x2c\x64\xad\x82\xa7\x4f\xb2\x63\x2f\x88\x23\x6c\x18\x8e\xa3\x15\xc5\xb6\x24\x7f\x07\x20\x35\x05\x95\x73\x51\x19\x33\x5c\x3e\x85\x2c\xad\x04\x35\x88\x52\xa9\x5a\x5e\x4e\xa7\x39\x48\x85\xe8\xa4\xbd\xb3\x09\x17\x85\x6e\x00\xb6\x7a\xda\xb6\x80\xfd\x17\x3f\x9d\x9f\x2d\xcf\xe6\x31\x54\xf0\xcc\x59\x7c\x3a\x99\x4d\xfe\x98\xa8\xe2\x39\xe4\xe4\x91\xb0\x59\x92\x9c\xd7\x74\x65\x42\xce\x81\x4a\x1c\x46\x7e\xbb\xba\xc5\x88\x48\x75\x4d\xe9\xa1\x12\x74\x90\x9f\xb6\xcd\x1c\xac\x46\x07\xfd\x55\x0c\xb5\xdb\xbd\x88\x1e\x78\xe3\x48\x3a\x7e\x23\x06\x95\xa5\x8f\x2d\x4b\xdb\xe7\xad\x3e\x4a\x21\xfb\xb1\xaa\x03\x7d\x5e\x72\xa9\x5e\x0f\x37\xf5\x8e\x19\x47\x38\x4e\xba\x4c\xa3\xbc\xf8\x0c\xaa\xdc\xf1\x93\x17\x01\x7e\x4e\x1b\x67\x31\x14\x98\xa9\x89\xc6\xed\x99\xb9\xe5\x0a\x14\x76\x46\x80\x55\x49\xf2\x8c\xbf\x94\x02\xcb\x92\x53\x74\xf3\x41\x03\x4e\x92\x24\x71\xcb\x15\x29\x52\xed\x40\x1f\x85\x49\x65\x36\x1f\xb9\xc5\x31\x59\x6f\xf9\x4d\x14\x17\x84\x15\xff\x51\xea\x3b\x87\x6f\x9b\xbe\x05\xd7\x82\x67\x58\x4a\xbc\x9f\x34\x88\x42\xce\x96\x67\xfd\x10\x18\x56\x3d\x61\x63\x89\x0b\xa3\x99\x9d\xeb\x88\x1c\xed\x66\x2f\x3e\xa9\x93\xd7\x89\xfb\xad\xa0\xd4\x29\xe3\x43\x06\xf5\xd4\x1c\xc0\xdb\x6a\x22\x50\x10\x1d\x76\xb0\x96\x0a\x57\x7f\xea\xaa\xfa\x5d\x60\xa9\x08\x6b\x26\xbd\xf6\x93\x13\x8a\x3d\x84\x8b\xea\x7e\x1c\x6b\xd9\xb9\xd7\xa5\x69\x82\xd7\xa8\xec\x1d\xba\x41\x8d\x3c\xe1\x0d\xee\xa5\x63\x36\x80\x67\x1c\x04\x43\x69\xdb\xe3\xcb\xba\xee\xe0\xba\x80\x87\xdd\x1c\x6a\x66\x4a\x47\xa7\x7b\xbe\xbc\xcb\x4a\x5c\xc1\x6e\x5a\xbd\x77\xdb\x4f\xe0\x9a\x92\x0c\xee\xb0\xea\x8e\xc8\x48\x70\xf7\x05\x89\x64\x09\x02\x69\xc6\xb4\xb2\xd1\xd6\xbe\xbb\x25\x18\x96\x7d\x95\xd8\xbe\x9e\xe1\x85\xc0\x48\x3f\x3f\x22\x03\x7a\x79\x19\xd7\x20\xe5\x23\x17\x68\xbc\xd9\x38\x5b\x83\x8e\x8c\xaf\x2b\xcd\xcf\x85\x76\x73\x83\xb3\x12\x18\x91\x55\xff\xa9\x8f\xee\xae\x6e\x17\x37\xf1\xdd\xc7\x45\x7c\xb2\x6b\x81\xee\xd0\xfd\x81\xd7\xad\x2f\xfd\x6b\xcf\x8d\x96\xd8\x06\x74\x1a\xed\x1f\x9e\x4a\xa7\xcb\x32\xce\x72\xd2\x36\xde\x92\x57\x13\x63\xb1\x1b\x2b\x91\x90\x52\x8c\xfa\x0f\x58\xb4\xd2\xd5\x90\xd7\x98\x62\x65\xd5\xdd\x47\xa8\xd1\xdd\x03\x6b\x55\x4e\x56\x5e\x6a\x9a\x28\x01\xe9\x45\xc0\xc7\x97\xed\x9d\x79\xdf\x2e\xff\x32\x34\xc0\xae\x63\xdf\x00\x33\xfd\x52\x2b\x2c\x6e\x9a\x29\xda\x7f\xfc\xcc\xb7\xe9\x49\x3d\x8f\xaf\xcd\xff\xb5\x53\xf6\x87\xb2\x2f\x43\xa2\x21\xfe\xbe\x39\x34\x8e\xfe\xf7\x95\x5c\x58\xbc\xbf\x8e\x7e\x2b\xbf\x2f\x04\x81\x01\x2d\xd8\xfa\x5a\xcf\xf4\xd4\x6c\xf6\x6f\x13\x85\x69\x04\x5b\x85\xa3\x85\x42\x79\x06\x74\x68\x41\xee\x05\x51\x6f\x55\x8a\x9f\xf9\xff\x65\x62\x75\x17\xbd\x23\x92\xca\xc9\x73\xdc\xf3\xb3\x0d\x29\x08\x38\x40\xba\x40\x75\x87\x94\x76\x28\xd7\x7c\xf7\xfa\x3b\xdc\xfe\x9c\x5f\xc7\xf2\x3c\x90\x53\xbf\xee\xfe\x20\x95\x06\xf5\xf1\x31\x8b\x1d\xf4\xb9\x2f\xea\xf3\x66\x8f\x0a\xd6\xe7\x32\x4c\x08\xef\xaa\x61\x56\x1b\x67\x5f\x31\xc6\x7a\x0b\xca\x66\xb4\x19\xfd\x1b\x00\x00\xff\xff\xcd\x77\xd5\xf1\x6d\x11\x00\x00")

func om_cluster_docsStandaloneJsonBytes() ([]byte, error) {
	return bindataRead(
		_om_cluster_docsStandaloneJson,
		"om_cluster_docs/standalone.json",
	)
}

func om_cluster_docsStandaloneJson() (*asset, error) {
	bytes, err := om_cluster_docsStandaloneJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "om_cluster_docs/standalone.json", size: 4461, mode: os.FileMode(420), modTime: time.Unix(1468510552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"om_cluster_docs/3_2_cluster.json": om_cluster_docs3_2_clusterJson,
	"om_cluster_docs/replica_set.json": om_cluster_docsReplica_setJson,
	"om_cluster_docs/sharded_set.json": om_cluster_docsSharded_setJson,
	"om_cluster_docs/standalone.json":  om_cluster_docsStandaloneJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"om_cluster_docs": &bintree{nil, map[string]*bintree{
		"3_2_cluster.json": &bintree{om_cluster_docs3_2_clusterJson, map[string]*bintree{}},
		"replica_set.json": &bintree{om_cluster_docsReplica_setJson, map[string]*bintree{}},
		"sharded_set.json": &bintree{om_cluster_docsSharded_setJson, map[string]*bintree{}},
		"standalone.json":  &bintree{om_cluster_docsStandaloneJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
