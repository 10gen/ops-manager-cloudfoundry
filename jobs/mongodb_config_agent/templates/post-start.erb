#!/bin/bash -e
# vim: set ft=sh

export PATH=/var/vcap/packages/jq/bin:/var/vcap/packages/mongodb/bin:$PATH

echo "Waiting 600s for MongoDB to accept connections..."
elapsed=0
until [ $elapsed -ge 600 ]
do
<% if p("mongo_ops.plan_id") == 'standalone' %>
  mongo \
    --host <%= link("mongod_node").instances.first.address %> --port 28000 -p <%= p("mongo_ops.admin_password") %> \
    -u admin admin --eval 'quit(db.runCommand({ping: 1}).ok ? 0 : 1)' \
    --quiet &> /dev/null && break
<% elsif p("mongo_ops.plan_id") == 'replica_set' %>
  mongo \
    --host <%= link("mongod_node").instances.map {|e| e.address}.join(',') %> --port 28000 -p <%= p("mongo_ops.admin_password") %> \
    -u admin admin --eval 'quit(db.runCommand({ping: 1}).ok ? 0 : 1)' \
    --quiet &> /dev/null && break
<% elsif p("mongo_ops.plan_id") == 'sharded_cluster' %>
  mongo \
    --host <%= link("mongod_node").instances.map {|e| e.address}.join(',') %> --port 28000 -p <%= p("mongo_ops.admin_password") %> \
    -u admin admin --eval 'quit(db.runCommand({ping: 1}).ok ? 0 : 1)' \
    --quiet &> /dev/null && break
<% end %>
  elapsed=$[$elapsed+5]
  sleep 5
done

if [ "$elapsed" -ge "600" ]; then
   echo "ERROR: Cannot connect to MongoDB. Exiting..."
   exit 1
else
<% if p("mongo_ops.backup_enabled") %>
  while true
  do
    clusters=($(curl --fail --digest  -u "<%= p('mongo_ops.username') %>:<%= p('mongo_ops.api_key') %>" <%= p('mongo_ops.url') %>/api/public/v1.0/groups/<%= p('mongo_ops.group_id') %>/clusters | jq -r ".results[].id"))

    if [ ${#clusters[@]} -eq 0 ]; then
        sleep 5
        continue
    fi

    for cluster in "${clusters[@]}"
    do
      curl -H "Content-Type: application/json" -X PATCH --fail --digest  -u "<%= p('mongo_ops.username') %>:<%= p('mongo_ops.api_key') %>" <%= p('mongo_ops.url') %>/api/public/v1.0/groups/<%= p('mongo_ops.group_id') %>/backupConfigs/${cluster} -d '{"statusName": "STARTED"}'
    done

    exit 0
  done
<% end %>
fi


